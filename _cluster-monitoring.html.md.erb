

<%# WARNING!!!! %>
<%# DO NOT ADD READBILITY LINE WRAPPING TO THIS CONTENT THE LONG LINES MUSt REMAIN TO CORRECTLY FORMAT THE FOLLOWING SECTION'S MARKDOWN CONTENT %>
<%# <!-- WARNING!!!! --> %>

In the **In-Cluster Monitoring** pane of the <%= vars.product_tile %> tile, 
the operator has the ability to turn on and off various observability
features that run in the cluster. These features are visible to cluster
users and focus on workload related logs and metrics. 

  ![Monitoring pane configuration](images/cluster-monitoring.png)

####<a id='wavefront'></a> Wavefront

You can monitor Kubernetes clusters and pods metrics externally using the integration with <a href="https://docs.wavefront.com">Wavefront by VMware</a>.  

<p class="note"><strong>Note:</strong> Before you configure Wavefront integration, you must have an active Wavefront account and access to a Wavefront instance. You provide your Wavefront access token during configuration and enabling errands. For additional information, see the <a href="https://docs.wavefront.com/integrations_pks.html">Wavefront documentation</a>.</p>

To enable and configure Wavefront monitoring, do the following:  

1. In the the <%= vars.product_tile %> tile, select **Monitoring**.  
1. Under **Wavefront Integration**, select **Yes**.  
  ![Wavefront configuration](images/monitoring-wavefront-config.png)
1. Under **Wavefront URL**, enter the URL of your Wavefront subscription. For example:
    <pre>
    https<span>:</span>//try.wavefront.com/api
    </pre>
1. Under **Wavefront Access Token**, enter the API token for your Wavefront subscription.
1. To configure Wavefront to send alerts by email, enter email addresses or Wavefront Target IDs 
separated by commas under **Wavefront Alert Recipient**, using the following syntax:

    ```
    USER-EMAIL,WAVEFRONT-TARGETID_001,WAVEFRONT-TARGETID_002
    ```
    Where:  
    * `USER-EMAIL` is the alert recipient's email address.  
    * `WAVEFRONT-TARGETID_001` and `WAVEFRONT-TARGETID_002` are your comma-delimited Wavefront Target IDs.  

    For example:
    <pre>
    randomuser<span>@</span>example.com,51n6psdj933ozdjf
    </pre>

To create alerts, you must enable errands in <%= vars.product_short %>.  

1. In the the <%= vars.product_tile %> tile, select **Errands**.  
1. On the **Errands** pane, enable **Create pre-defined Wavefront alerts errand**.  
1. Enable **Delete pre-defined Wavefront alerts errand**.  
1. Click **Save**. Your settings apply to any clusters created after you have saved these configuration settings and clicked **Apply Changes**.  

The <%= vars.product_tile %> tile does not validate your Wavefront configuration settings. To verify your setup, look for cluster and pod metrics in Wavefront.  

####<a id='metric-sinks'></a> Metric Sink Resources

You can configure <%= vars.product_short %>-provisioned clusters to send Kubernetes node metrics and pod metrics to metric sinks.
To enable clusters to send Kubernetes node metrics and pod metrics to metric sinks, do the following:

1. From **In-Cluster Monitoring**, select **Enable Metric Sink Resources**. If you enable this checkbox, <%= vars.product_short %> deploys Telegraf as a `DaemonSet`, a pod that runs on every node in all your Kubernetes clusters.

    <p class="note"><strong>Note:</strong> After configuring <%= vars.product_short %>, you must create your metric sinks. To create metric sinks, follow the instructions in <a href="create-sinks.html">Creating Sink Resources</a>.</p>

1. (Optional) To enable Node Exporter to send worker node metrics to metric sinks of kind `ClusterMetricSink`, select **Enable Node Exporter on workers**.
If you enable this checkbox, <%= vars.product_short %> deploys Node Exporter as a `DaemonSet`, a pod that runs on every worker node in all your Kubernetes clusters.
<br><br>
For more information about Node Exporter metrics, see the [Node Exporter](https://github.com/prometheus/node_exporter#enabled-by-default) GitHub repository.  

1. Click **Save**.

####<a id='log-sinks'></a> Log Sink Resources

1. To enable clusters to send Kubernetes API events and pod logs to log sinks, select **Enable Log Sink Resources**. If you enable this checkbox, <%= vars.product_short %> deploys Fluent Bit as a `DaemonSet`, a pod that runs on every node in all your Kubernetes clusters.