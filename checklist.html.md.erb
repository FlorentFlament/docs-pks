---
title: Upgrade Preparation Checklist for Enterprise PKS v1.7
owner: PKS
---

This topic serves as a checklist for preparing to upgrade <%= vars.product_full %> v1.6 to
<%= vars.product_full %> v1.7.

This topic contains important preparation steps that you must follow before beginning your upgrade.
Failure to follow these instructions may jeopardize your existing deployment data and cause the
upgrade to fail.

After completing the steps in this topic, you can continue to [Upgrading <%= vars.product_short %>](upgrade-pks.html).
If you are upgrading <%= vars.product_short %> for environments using vSphere with NSX-T, continue to
[Upgrading <%= vars.product_short %> with NSX-T](upgrade-pks-nsxt.html).

##<a id='backup'></a>Back Up Your <%= vars.product_short %> Deployment

We recommend backing up your <%= vars.product_short %> deployment before upgrading.  

<p class="note"><strong>Note</strong>: It is critical that you back up the <%= vars.product_short %> 
control plane before upgrading PKS v1.6 to PKS v1.7. 
The PKS Control Plane will be reconfigured during your PKS v1.7 upgrade. 
If your upgrade to PKS v1.7 fails, restore your system back to PKS v1.6 and contact Pivotal Support.
</p>

Back up your environment using the procedures for your environment:


* **<%= vars.product_short %> on vSphere with NSX-T**  
<br>
    Back up PKS by completing the procedures in the following topics:  
    - [Backing Up and Restoring <%= vars.product_short %>](backup-and-restore.html).
    - <a href="https://docs.vmware.com/en/VMware-NSX-T/2.1/com.vmware.nsxt.admin.doc/GUID-A0B3667C-FB7D-413F-816D-019BFAD81AC5.html">
    Backing Up and Restoring the NSX Manager</a> in the VMware documentation.
    - <a href="https://kb.vmware.com/s/article/2149237">Overview of Backup and Restore 
    options in vCenter Server 6.x (2149237)</a> in the VMware documentation.  
<%#=

    DO NOT INCLUDE THIS TYPICAL NOTE for PKS v1.7 UPGRADES - THIS ALTERNATIVE WON'T HELP IF THERE's A FAILURE

    <p class="note"><strong>Note</strong>: If you choose not to back up <    %= vars.product_short %    >, 
    NSX-T, or vCenter, we recommend backing up the NSX-T and NSX-T Container Plugin (NCP) logs.</p>
%>
    <p class="note"><strong>Note</strong>: If you choose not to back up NSX-T, or vCenter, 
    we recommend backing up the NSX-T and NSX-T Container Plugin (NCP) logs.</p>


* **<%= vars.product_short %> on any other IaaS**  
<br>
    Back up PKS by completing the procedures in the following topics:  
    - Back up the existing <%= vars.product_short %> control plane. For more
information, see [Backing Up and Restoring <%= vars.product_short %>](backup-and-restore.html).

##<a id='understand-upgrades'></a> Review What Happens During <%= vars.product_short %> Upgrades

If you have not already done so, review [What Happens During <%= vars.product_short %> Upgrades](understanding-upgrades.html). 

Plan your upgrade based on your workload capacity and uptime requirements.

##<a id='review-changes'></a> Review Changes in <%= vars.product_short %> v1.7

Review the [Release Notes](release-notes.html) for <%= vars.product_short %> v1.7.

##<a id='upgrade-clusters'></a> Upgrade All Clusters to <%= vars.product_short %> v1.6.x

Before you upgrade to <%= vars.product_short %> v1.7, you must upgrade all clusters to 
same patch version of <%= vars.product_short %> v1.6.x. 

<%= vars.product_short %> supports running clusters on the current version (_N_)
and the last version release (_N - 1_). 
For example, you can upgrade to <%= vars.product_short %> v1.7.0 
and run <%= vars.product_short %> v1.6.x clusters, 
but you cannot upgrade to <%= vars.product_short %> v1.7.0 
while running a <%= vars.product_short %> v1.6.1 cluster alongside a v1.6.0 cluster or v1.5.2 cluster. 
After the upgrade, the older version clusters can no longer be managed in <%= vars.product_short %> v1.7.0.

To check the version of existing clusters and availability of upgrade, run:

```
pks clusters
```

To upgrade one or more clusters, see [Upgrading Clusters](./upgrade-clusters.html#upgrade-clusters).

##<a id='resource-usage'></a> View Workload Resource Usage

View your workload resource usage in Dashboard. For more information, see
[Accessing Dashboard](access-dashboard.html).

If workers are operating too close to their capacity, the upgrade can fail. 

To prevent workload downtime during a cluster upgrade, 
we recommend running your workload on at least three
worker VMs, using multiple replicas of your workloads spread across those VMs. 
For more information, see [Maintaining Workload Uptime](maintain-uptime.html).

If your clusters are near capacity for your existing infrastructure, 
we recommend scaling up your clusters before you upgrade. 
Scale up your cluster by running `pks resize` or create a cluster
using a larger plan. For more information, see [Changing Cluster Configurations](scale-clusters.html).

##<a id='verify-k8s-health'></a> Verify Health of Kubernetes Environment

Verify that your Kubernetes environment is healthy. 
To verify the health of your Kubernetes environment, see [Verifying Deployment Health](verify-health.html#k8s).

##<a id='review-vsphere-nsxt'></a> Verify NSX-T Configuration (vSphere with NSX-T Only)

If you are upgrading <%= vars.product_short %> for environments using vSphere with NSX-T, perform the following steps:

1. Verify that the vSphere datastores have enough space.
1. Verify that the vSphere hosts have enough memory.
1. Verify that there are no alarms in vSphere.
1. Verify that the vSphere hosts are in a good state.
1. Verify that NSX Edge is configured for high availability using Active/Standby mode.
  <p class="note"><strong>Note</strong>: Workloads in your Kubernetes cluster are unavailable while
  the NSX Edge nodes run the upgrade unless you configure NSX Edge for high availability. For more
  information, see the <a href="./nsxt-prepare-env.html#nsx-edge-ha">Configure NSX Edge for High Availability (HA)</a>
section of <em>Preparing NSX-T Before Deploying <%= vars.product_short %></em>.</p>

##<a id='clean-up'></a> Clean up or Fix Failed Kubernetes Clusters

Clean up or fix any previous failed attempts to create PKS clusters 
with the PKS Command Line Interface
(PKS CLI) by performing the following steps:

1. View your deployed clusters by running the following command:

    ```
    pks clusters
    ```

    If the `Status` of any cluster displays as `FAILED`, continue to the next step. If no cluster
    displays as `FAILED`, no action is required. Continue to the next section.

1. To troubleshoot and fix failed clusters, perform the procedure in [Cluster Creation Fails](troubleshoot-issues.html#cluster-create-fail).

1. To clean up failed BOSH deployments related to failed clusters, perform the procedure in [Cannot Re-Create a Cluster that Failed to Deploy](troubleshoot-issues.html#cluster-recreate-fails).

1. After fixing and cleaning up any failed clusters, view your deployed clusters again by running `pks clusters`.

For more information about troubleshooting and fixing failed clusters, see the [Pivotal Support Knowledge Base](https://community.pivotal.io/s/topic/0TO0P000000IKdbWAG/pivotal-container-service).

##<a id='unique-hostname'></a> Verify Kubernetes Clusters Have Unique External Hostnames

Verify that existing Kubernetes clusters have unique external hostnames by checking for multiple
Kubernetes clusters with the same external hostname. Perform the following steps:

1. Log in to the PKS CLI. For more information, see
[Logging in to <%= vars.product_short %>](login.html). You must log in with an account that has the
UAA scope of `pks.clusters.admin`. For more information about UAA scopes, see
[Managing <%= vars.product_short %> Users with UAA](manage-users.html).

1. View your deployed PKS clusters by running the following command:

    ```
    pks clusters
    ```
1. For each deployed cluster, run `pks cluster CLUSTER-NAME` to view the details of the cluster.
For example:

    <pre class="terminal">
    $ pks cluster my-cluster
    </pre>
    Examine the output to verify that the `Kubernetes Master Host` is unique for each cluster.

##<a id='pks-proxy'></a> Verify PKS Proxy Configuration

Verify your current PKS proxy configuration by performing the following steps:

1. Check whether an existing proxy is enabled:
    1. Log in to Ops Manager.
    1. Click the **Pivotal Container Service** tile.
    1. Click **Networking**.
    1. If **HTTP/HTTPS Proxy** is **Disabled**, no action is required. Continue to the next section.
       If **HTTP/HTTPS Proxy** is **Enabled**, continue to the next step.

1. If the existing **No Proxy** field contains any of the following values, or you plan to add any
of the following values, contact PKS Support:
	* `localhost`
	* Hostnames containing dashes, such as `my-host.mydomain.com`

##<a id='check-poddisruptionbudget-value'></a> Check PodDisruptionBudget Value

<%= vars.product_short %> upgrades can run without ever completing if any Kubernetes app has a `PodDisruptionBudget`
with `maxUnavailable` set to `0`. To ensure that no apps have a `PodDisruptionBudget` with
`maxUnavailable` set to `0`, perform the following steps:

1. Use the Kubernetes CLI, `kubectl`, to verify the `PodDisruptionBudget` as the cluster
administrator. Run the following command:

    ```
    kubectl get poddisruptionbudgets --all-namespaces
    ```

1. Examine the output. Verify that no app displays `0` in the `MAX UNAVAILABLE` column.

## <a id="configure-node-drain"></a> Configure Node Drain Behavior

During the <%= vars.product_tile %> tile upgrade process, worker nodes are cordoned and drained.
Workloads can prevent worker nodes from draining and cause the upgrade to fail or hang.

To prevent hanging cluster upgrades, you can use the PKS CLI to configure the default node drain behavior.
The new default behavior takes effect during the next upgrade,
not immediately after configuring the behavior.

<p class="note"><strong>Note</strong>: You can also configure node drain behavior in the <%= vars.product_tile %> tile.
For information about configuring default node drain behavior in
the <%= vars.product_tile %> tile,
see <a href="./troubleshoot-issues.html#upgrade-drain-hangs">Worker Node Hangs Indefinitely</a>
in <i>Troubleshooting</i>.</p>

To configure default node drain behavior, do the following:

1. View the current node drain behavior by running the following command:

    ```
    pks cluster CLUSTER-NAME --details
    ```

    Where `CLUSTER-NAME` is the name of you cluster.
    <br><br>
    For example:
    <pre class="terminal">$ pks cluster my-cluster --details <br>
      Name:                     my-cluster
      Plan Name:                small
      UUID:                     f55ed6c4-c0a7-451d-b735-56c89fdb2ad7
      Last Action:              CREATE
      Last Action State:        succeeded
      Last Action Description:  Instance provisioning completed
      Kubernetes Master Host:   my-cluster.pks.local
      Kubernetes Master Port:   8443
      Worker Nodes:             3
      Kubernetes Master IP(s):  10.196.219.88
      Network Profile Name:
      Kubernetes Settings Details:
        Set by Cluster:
        Kubelet Node Drain timeout (mins)            (kubelet-drain-timeout):               10
        Kubelet Node Drain grace-period (mins)       (kubelet-drain-grace-period):          10
        Kubelet Node Drain force                     (kubelet-drain-force):                 true
        Set by Plan:
        Kubelet Node Drain force-node                (kubelet-drain-force-node):            true
        Kubelet Node Drain ignore-daemonsets         (kubelet-drain-ignore-daemonsets):     true
        Kubelet Node Drain delete-local-data         (kubelet-drain-delete-local-data):     true
      </pre>

1. Configure the default node drain behavior by running the following command:

    ```
    pks update-cluster CLUSTER-NAME FLAG
    ```

    Where:
    + `CLUSTER-NAME` is the name of your cluster.
    + `FLAG` is an action flag for updating the node drain behavior.

    For example:
    <pre class="terminal">$ pks update-cluster my-cluster --kubelet-drain-timeout 1 --kubelet-drain-grace-period 5<br>
      Update summary for cluster my-cluster:
      Kubelet Drain Timeout: 1
      Kubelet Drain Grace Period: 5
      Are you sure you want to continue? (y/n): y
      Use 'pks cluster my-cluster' to monitor the state of your cluster</pre>

    For a list of the available action flags for setting node drain behavior,
    see [pks update-cluster](cli/index.html#update-cluster) in _PKS CLI_.

##<a id='update-azure-worker-role'></a> Update Your Role for the Worker Node Managed Identity on Azure

If you are running <%= vars.product_short %> on Azure,
you must add the `"Microsoft.Compute/virtualMachines/read"` action to the worker node managed identity.

<p class="note"><strong>Note</strong>: You do not need to modify the worker node managed identity role 
if you are running <%= vars.product_short %> on AWS, GCP, vSphere, or vSphere with NSX-T. 
Modifying the role for Azure is a requirement as of Kubernetes v1.14.5.</p>

To add the `"Microsoft.Compute/virtualMachines/read"` action, do the following:

1. List your roles using the Azure CLI. For example:

    <pre class="terminal">
    $ az role definition list --custom-role-only true -o json
    </pre>

1. Retrieve the definition of the `"PKS worker"` role using the `roleName` key. For example:

    <pre class="terminal">
    $ az role definition list --custom-role-only true -o json | jq -r '.[] | select(.roleName=="PKS worker")'
    </pre>

1. Copy the JSON to a file and add `"Microsoft.Compute/virtualMachines/read"` under `"Actions"`.

1. Save your template as `pks_worker_role.json`.

1. Run the following command to update the role:

    ```
    az role definition update --role-definition pks_worker_role.json
    ```

For more information about creating managed identities for <%= vars.product_short %>,
see [Creating Managed Identities in Azure for <%= vars.product_short %>](azure-managed-identities.html).
