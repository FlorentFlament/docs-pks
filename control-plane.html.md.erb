---
title: Enterprise PKS Architecture
owner: PKS
---

This topic describes how <%= vars.product_full %> manages the deployment of Kubernetes clusters.

##<a id="overview"></a><%= vars.product_short %> Overview

An <%= vars.product_short %> installation consists of the following components:
  
* PKS Control Plane VM  
* PKS Database VM  
* Ops Manager VM  
* PKS API Load Balancer  
* Kubernetes clusters and load balancers to host workloads  

The following illustrates the interaction between <%= vars.product_short %> components:  
<br>
<%= image_tag('images/pks-overview.png') %>

BOSH, hosted on the Ops Manager VM, deploys and manages Kubernetes clusters. 
Administrators use the PKS Command Line Interface (PKS CLI) to direct BOSH 
from their local workstations. The PKS CLI directs BOSH using the PKS API hosted 
on the PKS Control Plane VM.  

The PKS Database, hosted on the PKS Database VM, stores PKS Control Plane information. 

Kubernetes deploys and manages workloads on Kubernetes clusters. 
Administrators use the  Kubernetes CLI, `kubectl`, to direct Kubernetes 
from their local workstations.

####Standard and High Availability Modes

<%= vars.product_short %> can be configured in either Standard or High Availability modes.  

* In Standard Mode the PKS Database is hosted on a single database VM.
* In High Availability Mode the PKS Database is hosted in a 3-node database cluster.  

<br>
The following illustrates the interaction between <%= vars.product_short %> components in High Availability Mode:
<%= image_tag('images/pks-overview-ha.png') %>

##<a id="cluster-management"></a>Cluster Lifecycle Management

The PKS Control Plane enables users to deploy and manage Kubernetes clusters.  

Administrators use the PKS Command Line Interface (PKS CLI) on their local workstations 
to access the PKS Control Plane. For instructions on installing the PKS CLI, see [Installing the PKS CLI](installing-pks-cli.html).  

###<a id="control-plane"></a>PKS Control Plane Overview

The PKS Control Plane manages the lifecycle of Kubernetes clusters deployed 
using <%= vars.product_short %>. 

The control plane provides the following via the PKS API:

* View cluster plans
* Create clusters
* View information about clusters
* Obtain credentials to deploy workloads to clusters
* Scale clusters
* Delete clusters
* Create and manage network profiles for VMware NSX-T

In addition, the PKS Control Plane can upgrade all existing clusters using the **Upgrade all clusters** BOSH errand.
For more information, see [Upgrade Kubernetes Clusters](upgrade-pks.html#upgrade-instances) in _Upgrading <%= vars.product_short %>_.

###<a id="architecture"></a>PKS Control Plane Architecture

PKS Control Plane is hosted on a single VM. 
The `pivotal-container-service` VM hosts the following services:

* User Account and Authentication (UAA)  
* PKS API  
* PKS Broker
* Billing and Telemetry  

The following describes UAA, PKS API, and PKS Broker services, the primary services hosted on the PKS Control Plane VM:

####<a id="uaa"></a>UAA

When a user logs in to or logs out of the PKS API through the PKS CLI, the PKS CLI communicates with UAA to authenticate them.
The PKS API permits only authenticated users to manage Kubernetes clusters.
For more information about authenticating, see [PKS API Authentication](pks-api-auth.html).

UAA must be configured with the appropriate users and user permissions.
For more information, see [Managing <%= vars.product_short %> Users with UAA](manage-users.html).

####<a id="pks-api"></a>PKS API

Through the PKS CLI, users instruct the PKS API server to deploy, scale up, and delete Kubernetes clusters as well as show cluster details and plans.
The PKS API can also write Kubernetes cluster credentials to a local kubeconfig file, which enables users to connect to a cluster through `kubectl`.

On AWS, GCP, and vSphere without NSX-T deployments the PKS CLI communicates with the 
PKS API within the control plane via the PKS API Load Balancer. 
On vSphere with NSX-T deployments the PKS API host is accessible via a DNAT rule. 
For information about enabling the PKS API on vSphere with NSX-T, see the 
[Share the PKS API Endpoint](installing-nsx-t.html#retrieve-endpoint) section in 
_Installing <%= vars.product_short %> on vSphere with NSX-T Integration_.

The PKS API sends all cluster management requests, except read-only requests, to the PKS Broker.

####<a id="pks-broker"></a>PKS Broker

When the PKS API receives a request to modify a Kubernetes cluster, it instructs the PKS Broker to make the requested change.

The PKS Broker consists of an [On-Demand Service Broker](https://docs.pivotal.io/svc-sdk/odb/index.html) and a Service Adapter. The PKS Broker generates a BOSH manifest and instructs the BOSH Director to deploy or delete the Kubernetes cluster.

For <%= vars.product_short %> deployments on vSphere with NSX-T, there is an additional component, the <%= vars.product_short %> NSX-T Proxy Broker.
The PKS API communicates with the PKS NSX-T Proxy Broker, which in turn communicates with the NSX Manager to provision the Node Networking resources.
The PKS NSX-T Proxy Broker then forwards the request to the On-Demand Service Broker to deploy the cluster.

###<a id="overview-sql"></a>PKS Database Overview

By default the PKS Database is hosted on a single MySQL node, `pks-db`. 
The `pks-db` VM hosts the MySQL, proxy, and other data-related services. 

PKS Control Plane data is persisted to the PKS Database 
for the following services:

* PKS API
* UAA
* Billing
* Telemetry

When <%= vars.product_short %> is configured for High Availability Mode 
the PKS Database is a 3-node MySQL cluster.

##<a id="workload-management"></a>Cluster Workload Management

<%= vars.product_short %> users manage their container-based workloads on Kubernetes clusters through `kubectl`. For more information about `kubectl`, see [Overview of kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) in the Kubernetes documentation.
