---
title: Configuring PKS Clusters with Private Docker Registry CA Certificates 
owner: PKS
---

This topic describes how to configure <%= vars.product_full %> Kubernetes clusters with 
private Docker registry SSL CA certificates.

## <a id="overview"></a>Overview

Docker allows you to store Docker images in private registries and 
secures the registries with SSL CA certificates. 
You can enable your <%= vars.product_short %> Kubernetes clusters to authenticate 
into your private Docker registries by configuring your clusters with SSL CA certificates.  

You can configure both new and existing <%= vars.product_short %> clusters to have 
Docker registry CA certificates.  

<p class="note"><strong>Note:</strong> Only Linux clusters can be configured to have 
Docker registry CA certificates.</p>

To create a new cluster configured with Docker registry SSL CA certificates, complete the following procedures:  

* [Set up Your API Access Token](#set-token)  
* [Create a Cluster with SSL CA Certificates](#create-cluster)  

To update an existing cluster with Docker registry SSL CA certificates, complete the following procedures:  

* [Set up Your API Access Token](#set-token)  
* [Update a Cluster with SSL CA Certificates](#update-cluster)  

## <a id='prereq'></a> Prerequisites

Before configuring <%= vars.product_short %> Kubernetes clusters to have Docker registry CA certificates, 
you must have the following:

* A private Docker registry configured to use SSL CA certificates. 
For more information about securing a private Docker registry, see 
[Use self-signed certificates](https://docs.docker.com/registry/insecure/#use-self-signed-certificates) 
in the _Docker Registry_ manual.  

## <a id='set-token'></a> Set up Your API Access Token

The curl commands in this topic use an access token environment variable to
authenticate to the PKS API endpoints.

<%= partial 'create-auth-token-var' %>

## <a id='create-cluster'></a> Create a Cluster with SSL CA Certificates

You can create a new cluster configured with one or more SSL CA certificates by 
using the PKS API `create-cluster` endpoint.

1. To create a cluster configured with one or more SSL CA certificates, run the following command:

    ```
    curl -X POST \
      https://PKS-API:9021/v1/clusters \
      -H 'Accept: application/json' \
      -H 'Authorization: Bearer $YOUR-ACCESS-TOKEN' \
      -H 'Content-Type: application/json' \
      -H 'Host: PKS-API:9021' \
      -d '{
      "name": "CLUSTER-NAME",
      "plan_name": "PLAN-NAME",
      "parameters": {
        "kubernetes_master_host": "KUBERNETES-MASTER-HOST",
        "custom_ca_certs": [
          {
            "domain_name": "DOMAIN-NAME",
            "ca_cert": "CA-CERTFICATE"
          }
        ]
      }
    }'
    ```
<br>
    Where:
    * `PKS-API` is the FQDN of your PKS API endpoint. For example, `api.pks.example.com`.
    * `YOUR-ACCESS-TOKEN` is the name of your access token environment variable.  
    * `CLUSTER-NAME` is your cluster's name.
    * `PLAN-NAME` is your plan's name.
    * `KUBERNETES-MASTER-HOST` is your Kubernetes master host.
    *  `DOMAIN-NAME` is a Docker Registry URL.  You cannot remove an existing Docker Registry URL from a cluster. 
    If you specify a URL that is already registered with your cluster, 
    the cluster’s existing CA certificate for that URL is overwritten.
    * `CA-CERTFICATE` is the CA certificate that corresponds to `DOMAIN-NAME`.  

    <p class="note"><strong>Note:</strong> You can configure your cluster with additional certificates
      by including the certificates in the <code>custom_ca_certs</code> array as additional  <code>domain_name</code>, <code>ca_cert</code> pairs.
     </p>

     <p class="note"><strong>Note:</strong> You can include wildcard characters in your <code>domain_name</code> URLs. 
      For example, <code>*.docker.com</code>. 
    </p>

## <a id='update-cluster'></a> Update a Cluster with SSL CA Certificates

You can update an existing cluster with one or more SSL CA certificates by using the PKS API `update-cluster` endpoint.

1. To configure an existing cluster with one or more SSL CA certificates, run the following command:

    ```
    curl -X PATCH \
      https://PKS-API:9021/v1/clusters/CLUSTER-NAME \
      -H 'Accept: application/json' \
      -H 'Authorization: Bearer $YOUR-ACCESS-TOKEN' \
      -H 'Content-Type: application/json' \
      -H 'Host: PKS-API:9021' \
      -d '{
            "custom_ca_certs": [
              {
                "domain_name": "DOMAIN-NAME",
                "ca_cert": "CA-CERTFICATE"
              }
            ]
          }'
    ```  
<br>
    Where:
    * `PKS-API` is the FQDN of your PKS API endpoint. For example, `api.pks.example.com`.  
    * `YOUR-ACCESS-TOKEN` is the name of your access token environment variable.  
    * `CLUSTER-NAME` is your cluster's name.  
    *  `DOMAIN-NAME` is a Docker Registry URL.  You cannot remove an existing Docker Registry URL from a cluster. 
    If you specify a URL that is already registered with your cluster, 
    the cluster’s existing CA certificate for that URL is overwritten.
    * `CA-CERTFICATE` is the CA certificate that corresponds to `DOMAIN-NAME`.  

    <p class="note"><strong>Note:</strong> You can configure your cluster with additional certificates
      by including the certificates in the <code>custom_ca_certs</code> array as additional  <code>domain_name</code>, <code>ca_cert</code> pairs.
     </p>

     <p class="note"><strong>Note:</strong> You can include wildcard characters in your <code>domain_name</code> URLs. 
      For example, <code>*.docker.com</code>. 
    </p>
