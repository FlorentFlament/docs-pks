---
title: Defining Network Profiles for the Layer 4 Load Balancer
owner: PKS
---

<strong><%= modified_date %></strong>

This topic describes how to define network profile to configure the NSX-T Load Balancer for <%= vars.product_full %>.

## <a id='nsx-lb-about'></a> About the NSX-T Load Balancer

The [NSX-T Load Balancer](https://docs.vmware.com/en/VMware-NSX-T-Data-Center/2.4/administration/GUID-91F2D574-F469-481A-AA39-CD6DBC9682CA.html) is a logical load balancer that handles a number of functions using virtual servers and pools.

By default the following NSX-T virtual servers are deployed by <%= vars.product_short %>:

- 1 global TCP layer 4 virtual server for the Kubernetes API
- 1 TCP layer 4 virtual server for **each** Kubernetes service of `type: LoadBalancer`
- 2 global layer 7 virtual servers for the Kubernetes Ingress Controller (HTTP and HTTPS)

The `nsx_lb` parameter is used to control if the NSX-T Load Balancer is used in a Kubernetes cluster provisioned by PKS. This includes the global TCP layer 4 virtual server that fronts the Kubernetes API server (on the master node(s)), as well as a TCP layer 4 virtual server for each Kubernetes service of [type: LoadBalancer](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer). 

The `nsx_ingress_controller` parameter is used to control if NCP is used as the Ingress Controller for the Kubernetes cluster. By default when you define an [ingress resoure](https://kubernetes.io/docs/concepts/services-networking/ingress/) for a Kubernetes cluster, NCP (which runs on Kubenetes worker nodes), instructs the NSX-T load balancer to provision 2 layer 7 virtual services (HTTP and HTTPS) as the [Ingress Controller](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/). 

The `nsx_ingress_controller` parameter is subject to the `nsx_lb` parameter as described in the following table.

  <table>
    <th>`nsx_lb` setting</th>
    <th>"nsx_ingress_controller": true (default)</th>
    <th>"nsx_ingress_controller": false</th>
    <tr>
      <td>"nsx_lb": true (default)</td>
      <td>This means you want to use the NSX-T Layer 4 Load Balancer and the NCP-provisioned Layer 7 Ingress Controller.</td>
      <td>This means you want to use the NSX-T Layer 4 Load Balancer and a third-party Ingress Controller, such as [NGINX](https://kubernetes.github.io/ingress-nginx/).</td>
    </tr>
    <tr>
      <td>"nsx_lb": false</td>
      <td>This is an invalid configuration because you cannot disable the NSX-T Load Balancer and use NCP as the Ingress Controller. The network profile will fail validation.</td>
      <td>This means you want to use a third-party load balancer and a third-party ingress controller.</td>
    </tr>
  </table>

## <a id='nsx-lb-params'></a> NSX-T Load Balancer Parameters

The following table shows the parameters for configuring the NSX-T Load Balancer:

  <table>
    <th width="30%">Parameter</th>
    <th>Type</th>
    <th>Description</th>
    <tr>
      <td>`name`</td>
      <td>String</td>
      <td>User-defined name of the network profile.</td>
    </tr>
    <tr>
      <td>`description`</td>
      <td>String</td>
      <td>User-defined description for the network profile.</td>
    </tr>
    <tr>
      <td>`parameters`</td>
      <td>Map</td>
      <td>One or more name-value pairs.</td>
    </tr>
    <tr>
      <td>`cni_configurations`</td>
      <td>Map</td>
      <td>Map containing two key-value pairs: `type` and `parameters`.</td>
    </tr>    
    <tr>
      <td>`type`</td>
      <td>Constant String</td>
      <td>Only `nsxt` is accepted.</td>
    </tr>    
    <tr>
      <td>`parameters`</td>
      <td>Map</td>
      <td>Map containing one or more key-value pairs for NCP settings.</td>
    </tr>
    <tr>
      <td>`nsx_lb`</td>
      <td>Boolean</td>
      <td>Flag to control if the NSX-T Load Balancer is used for the Kubernetes cluster.</td>
    </tr>         
    <tr>
      <td>`x_forwarded_for`</td>
      <td>String Enum</td>
      <td>Use to preserve the client's source IP address. Default is none. Accepts `"insert"` and `"replace"`.</td>
    </tr>    
    <tr>
      <td>`max_l4_lb_service`</td>
      <td>Integer</td>
      <td>Limit the maximum number of layer 4 virtual servers per cluster. Minimum is `0`.</td>
    </tr>        
    <tr>
      <td>`l4_persistence_type`</td>
      <td>String Enum</td>
      <td>Connection stickiness based on `source_ip` (only accepted value).</td>
    </tr>    
    <tr>
      <td>`l4_lb_algorithm`</td>
      <td>String Enum</td>
      <td>Specify the layer 4 load balancer behavior. Accepts `"round_robin"` (default), `"least_connection"`, `"ip_hash"`, `"weighted_round_robin"`.</td>
    </tr>    
  </table>

## <a id='nsx-lb-example'></a> Example Network Profile for NSX-T Load Balancer Configuration

The following network profile is an example that illustrates the parameters exposed for configuring `ncp.ini`. 

```
{
  "name": "network_profile",
  "description": "Example network profile for nsxt load balancer",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "nsx_lb": true,        
           "x_forwarded_for": "replace",
           "max_l4_lb_service": 10,
           "l4_persistence_type": "source_ip",
           "l4_algorithm": "weighted_round_robin"           
       	   }
   		 }
   	}
}
```

## <a id='nsx_lb'></a> nsx_lb

The `nsx_lb` flag gives you the choice to of deploying the NSX-T Load Balancer or a third-party load balancer, such as Ngnix. The `nsx_lb` parameter maps to the `use_native_loadbalancer` parameter in NCP.ini. The default setting is `true`. To use a third party load balancer, set this parameter to false.

For example:

```
{
  "name": "example_network_profile",
  "description": "nsx_lb and nsx_ingress_controller are enabled",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
         "nsx_lb": false,
         "nsx_ingress_controller": false
      }
    }
  }
}
```

Since the `nsx_ingress_controller` is a component of the NSX-T Load Balancer, if you choose to use a third-party load balancer (`nsx_lb: false`), you must also explicitly disble the `nsx_ingress_controller`. See [Defining Network Profile for the HTTP/S Ingress Controller](./network-profiles-ncp-ingress.html). 

## <a id='x_forwarded_for'></a> x_forwarded_for

When the NSX-T Load Balancer creates a virtual server, it will assign a new IP address. This may not be the same IP address that Kubernetes pods and services are familiar with. The `x_forwarded_for` parameter lets you keep the same soure IP as the original virtual server.

The `x_forwarded_for` parameter type is String that accepts `"insert"` and `"replace"`. Any other type will be rejected. Missing entry is accepted.

```
{
  "name": "example-network-profile",
  "description": "x_forwarded_for",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "x_forwarded_for": "insert"
      }
    }
  }
}
```

## <a id='max_l4_lb_service'></a> max_l4_lb_service

The default NSX-T Load Balancer behavior is that auto-scaling is unlimited. This means that the number of layer 4 virtual servers that can be deployed is governed only by the capacity of the Edge Cluster where the load balancer service is deployed. As a result, in theory it is possible for a single Kubernetes cluster to use up all of the layer 4 virtual servers that the Edge Cluster can support.

The `max_l4_service` parameter sets the upper limit for the number of virtual servers that can be used by a Kubernetes cluster. You can use this parameter to limit the number of virtual servers that can be created per Kubernetes cluster.

The `max_l4_lb_service` data type is an integer. The value must be larger or equal to 1. Missing entry is accepted.

For example, the following network profile uses the `max_l4_lb_service` parameter to limit the number of layer 4 virtual servers to 100 per cluster:

```
{
  "name": "example_network_profile",
  "description": "max_l4_lb_service",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_lb_service": 100
         }
     }
  }
}
```

## <a id='l4_persistence_type'></a> l4_persistence_type

The `l4_persistence_type` is used to set connection stickiness based on `source_ip`.

The `l4_persistence_type` data type is string. The only accepted value is `source_ip`.

```
{
  "name": "example_network_profile",
  "description": "l4_persistence_type",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
        "l4_persistence_type": "source_ip"
      }
    }
  }
}
```

## <a id='l4_lb_algorithm'></a> l4_lb_algorithm

The `l4_lb_algorithm` is used to set the algorithm type for the layer 4 NSX-T Load Balancer service.

The `l4_lb_algorithm` data type is string enumeration that accepts the following values: `"round_robin"` (default), `"least_connection"`, `"ip_hash"`, and `"weighted_round_robin"`.

For example, the following network profile specifies the `weighted_round_robin` as the load balancer algorithm.

```
{
  "name": "example_network_profile",
  "description": "l4_lb_algorithm",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
        "l4_lb_algorithm": "weighted_round_robin"
      }
    }
  }
}
```


