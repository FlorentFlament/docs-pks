---
title: Defining Network Profiles for NCP Configuration
owner: PKS
---

<strong><%= modified_date %></strong>

This topic describes how to define network profiles for Kubernetes clusters provisioned with <%= vars.product_full %> on vSphere with NSX-T.

## <a id='multi-t0'></a> About NCP Configuration

<%= vars.product_full %> exposes a selected group of ncp.ini parameters in network profile.

## Parameters

When parameters is not empty, it only accepts following keys:

Key name | Key type | Default value if not set | Behavior
---------|----------|--------------------------|---------
keep_source_ip | boolean | none |Set INSERT for x_forwarded_for
ingress_ip | string | none | Ncp will create ingress virtual server with given IP
log_settings | map[string]interface{} | log_level: nonelog_dropped_traffic: false | Customize loglevel; Customize if Distributed Firewall "Deny" is logged
ingress_persistence_settings | map[string]interface{} | persistence_type: none; persistence_timeout: none| Customize parameters for L7 persistence
max_l4_service | integer | none(default value in ncp code) | Upper limit of virtual servers(k8s L4 services) per cluster
enable_err_crd | boolean | false | Enable nsxerror crd.
nsx_ingress_controller | boolean | true | Use nsx ingress controller
nsx_lb | boolean | true | Use nsx-t native load balancer
l4_persistence_type | string(enumeration: only source_ip is accepted) | none | Connection stickiness based on source_ip


## CNI Configurations

A new parameter is added into network profile, called "cni_configurations". It’s a map with two keys.

type, a string that only accepts "nsxt";
parameters, which is a map containing key-values pairs, just like the "parameters" in network profile;

This following table summarizes its current behavior. 

key
value
Other values
empty value
missing entry
type
constant string "nsxt"
rejected
accepted
accepted
parameters
a map
rejected
Accepted only when type is also empty
accepted

type

For now, it only supports constant "nsxt", any other values that are not empty string will be rejected. If it’s empty, it’ll only be accepted if parameters is empty or missing.

Success scenarios
Empty value
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": ""
     }
  }
}

Result: Network profile hello successfully created

Constant "nsxt"
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt"
     }
  }
}

Result: Network profile hello successfully created

Failure scenarios
Non-empty value that’s not "nsxt"
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsx"
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: unsupported cni configuration type 'nsx'

parameters
Its type is map[string]interface{}, any other type will be rejected. Missing or empty value is accepted.

Success scenarios
empty map[string]interface{}
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "",
         "parameters": {
         }
     }
  }
}
Result: Network profile hello successfully created

Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
         }
     }
  }
}

Result: Network profile hello successfully created

Failure scenarios
non-empty map[string]interface{} with valid key-values when type is empty
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "",
         "parameters": {
           "keep_source_ip": true
         }
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: type has to be defined in cni configuration

Unsupported keys
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "other_settings": {
            }
         }
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: unsupported cni configuration parameter key 'other_settings'
keys in parameters


## keep_source_ip

Its type is boolean, any other type will be rejected, including "true" or "False". Missing entry is accepted.

Success scenarios
Boolean type
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "keep_source_ip": true
         }
     }
  }
}

Result: Network profile hello successfully created
Failure scenarios
Other value type, eg: string
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "keep_source_ip": "true"
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'keep_source_ip': 'true', expect bool for keep_source_ip, but get string, true: wrong parameter type

Note: in json, boolean value has to be in lower case.
Invalid boolean type
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "keep_source_ip": True
         }
     }
  }
}
Result: Error: failed to parse network profile JSON input: invalid character 'T' looking for beginning of value

## Ingress IP

Its type is an valid IP string, any other value type will be rejected. Invalid ip address will be rejected. Missing entry is accepted.

Success scenarios
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": "192.168.160.212"
         }
     }
  }
}
Result: Network profile hello successfully created

Failure scenarios
Invalid ip address
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": "192.168.460.212"
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'ingress_ip': '192.168.460.212', expect valid ip address for ingress_ip: invalid parameter value
Other type
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": 192.168.160.212
         }
     }
  }
}

Result: Error: failed to parse network profile JSON input: invalid character '.' after object key:value pair

## max_l4_service

Its type is integer, any other type will be rejected. Value has to be larger or equal to 1. Missing entry is accepted.
Success scenarios
Integer equal to 1
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": 1
         }
     }
  }
}

Result: Network profile hello successfully created
Integer larger than 1
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": 100000
         }
     }
  }
}
Result: Network profile hello successfully created
Note: there is no upper limit validation at this time.
failure scenarios
Integer less than 1
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": 0
         }
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'max_l4_service': '0', expect positive number(>=1) for max_l4_service: invalid parameter value
Other types
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": "1"
         }
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'max_l4_service': '1', expect integer for max_l4_service, but get string: 1: wrong parameter type

## enable_err_crd

Its type is boolean, any other type will be rejected. Missing entry is accepted.
The same as "keep_source_ip"

## NSX Load Balancer

The same as "keep_source_ip"

## nsx_ingress_controller
The same as "keep_source_ip"

Failure scenarios
Note: when nsx_lb is false, nsx_ingress_controller can only be set to false.
kubo@jumper:~$ cat np.json
{
  "name": "test",
  "description": "cni parameters",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
         "nsx_lb": false,
         "nsx_ingress_controller": true
      }
    }
  }
}

kubo@jumper:~$ pks create-network-profile np.json

Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation on keys 'nsx_ingress_controller,nsx_lb': nsx_ingress_controller can only be set to false when nsx_lb is false: invalid parameter value

### log_settings

Its type is map[string]interface{}, any other type will be rejected. Missing entry is accepted, empty value is accepted.
Success scenarios
Empty value
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
           }
         }
     }
  }
}

Result: Network profile hello successfully created
Failure scenarios
unsupported key
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_something": "a"
           }
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'log_settings': 'map[log_something:a]', in log_settings: log_something: unsupported parameter


It only supports two keys: log_dropped_traffic and log_level.

log_dropped_traffic
Its type is boolean, its behavior is the same as "keep_source_ip". Missing entry is accepted.
log_level
Its type is string. Its value is enumeration, that takes value only from following values: "INFO,WARNING,DEBUG,ERROR,CRITICAL". Missing entry is accepted. The value will actually be set for three ncp.ini keys: coe.nsxlib_loglevel, coe.loglevel, k8s.loglevel.
Success scenarios
Valid string value
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_level": "INFO"
           }
         }
     }
  }
}

Result: Network profile hello successfully created
Failure scenarios
Invalid string value
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_level": "Verbose"
           }
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'log_settings': 'map[log_level:Verbose]', expect any value in list INFO,WARNING,DEBUG,ERROR,CRITICAL, but get Verbose: invalid parameter value

Other type
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_level": 10
           }
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'log_settings': 'map[log_level:10]', expect string for log_level, but get int: 10: wrong parameter type

## L4_persistence_type

Its type is string, only value "source_ip" is accepted.
Success scenarios
kubo@jumper:~$ pks create-network-profile np.json


Network profile test-3 successfully created

kubo@jumper:~$ cat np.json
{
  "name": "test-3",
  "description": "cni parameters",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
        "l4_persistence_type": "source_ip"
      }
    }
  }
}
kubo@jumper:~$ pks cluster k8s4

Name:                     k8s4
Plan Name:                small
UUID:                     2e6a1dac-bd8b-4a4b-82b0-389c19a66834
Last Action:              CREATE
Last Action State:        in progress
Last Action Description:  Instance provisioning in progress
Kubernetes Master Host:   k8s4
Kubernetes Master Port:   8443
Worker Nodes:             1
Kubernetes Master IP(s):  In Progress
Network Profile Name:     test-3

kubo@jumper:~$ pks network-profile test-3

Name:         test-3
UUID:         5a0791da-e50e-49e7-8780-ddbc1ea75926
Description:  cni parameters
Parameters:   {"cni_configurations":{"parameters":{"l4_persistence_type":"source_ip"},"type":"nsxt"}}

kubo@jumper:~$ bosh -d service-instance_2e6a1dac-bd8b-4a4b-82b0-389c19a66834 ssh master "sudo su -c 'cat  /var/vcap/jobs/ncp/config/ncp.ini'" | grep 'l4_persistence'
master/3cd9b504-c146-4c68-9e55-7ff1b85e30be: stdout | l4_persistence = source_ip

Failure scenarios
kubo@jumper:~$ pks create-network-profile np.json

Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'l4_persistence_type': 'source', expect any value in list source_ip, but get source: invalid parameter value
kubo@jumper:~$ cat np.json
{
  "name": "test-3",
  "description": "cni parameters",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
        "l4_persistence_type": "source"
      }
    }
  }
}

## Ingress_persistence_settings

Its type is map[string]interface{}, missing entry is accepted, empty value is accepted.
It only supports two keys: persistence_timeout and persistence_type.

These two keys are correlated thus they have to be both set/unset at the same time.
persistence_type
Its type is string, value is enumeration, which only takes value from cookie, source_ip. Empty value is not accepted. Missing entry is accepted only when persistence_timeout is missing.
Persistence_timeout
Its type is integer that is larger or equal to 1. Empty value is not accepted. Missing entry is accepted only when persistence_timeout is missing.

Success scenarios
Empty entry
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
            }
         }
     }
  }
}

Result: Network profile hello successfully created
Both keys are specified with valid values
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
             "persistence_type": "cookie",
             "persistence_timeout": 1
            }
         }
     }
  }
}
Result: Network profile hello successfully created
Failure scenarios
One key is specified, the other is missing
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
             "persistence_timeout": 1
            }
         }
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'ingress_persistence_settings': 'map[persistence_timeout:1]', expect persistence_type and persistence_timeout to be both specified: parameter is missing

Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
             "persistence_type": "cookie"
            }
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'ingress_persistence_settings': 'map[persistence_type:cookie]', expect persistence_type and persistence_timeout to be both specified: parameter is missing
Persistence_type has invalid string value
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
             "persistence_type": "dst_ip",
             "persistence_timeout": 1
            }
         }
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'ingress_persistence_settings': 'map[persistence_timeout:1 persistence_type:dst_ip]', expect any value in list cookie,source_ip, but get dst_ip: wrong parameter type


