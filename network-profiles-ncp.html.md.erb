---
title: Defining Network Profiles for NCP Configuration
owner: PKS
---

<strong><%= modified_date %></strong>

This topic describes how to define network profiles for Kubernetes clusters provisioned with <%= vars.product_full %> on vSphere with NSX-T.

## <a id='ncp-about'></a> About NCP Configuration

<%= vars.product_full %> embeds the [NSX Container Plug-in (NCP)](https://docs.vmware.com/en/VMware-NSX-T-Data-Center/2.4/com.vmware.nsxt.ncp_kubernetes.doc/GUID-52A92986-0FDF-43A5-A7BB-C037889F7559.html). To customize and tune the configuation of NCP, <%= vars.product_full %> exposes a select group of `ncp.ini` parameters via network profile.

## <a id='ncp-params'></a> NCP Parameters

The parameter `cni_configurations` is a map with two keys: `type` and `parameters`. The following table shows the parameters for configuring NCP:

  <table>
    <th width="30%">Parameter</th>
    <th>Type</th>
    <th>Description</th>
    <tr>
      <td>`name`</td>
      <td>String</td>
      <td>User-defined name of the network profile.</td>
    </tr>
    <tr>
      <td>`description`</td>
      <td>String</td>
      <td>User-defined description for the network profile.</td>
    </tr>
    <tr>
      <td>`parameters`</td>
      <td>Map</td>
      <td>One or more name-value pairs.</td>
    </tr>
    <tr>
      <td>`cni_configurations`</td>
      <td>Map</td>
      <td>Map containing two key-value pairs: `type` and `parameters`.</td>
    </tr>    
    <tr>
      <td>`type`</td>
      <td>Constant String</td>
      <td>Only `nsxt` is accepted.</td>
    </tr>    
    <tr>
      <td>`parameters`</td>
      <td>Map</td>
      <td>Map containing one or more key-value pairs for NCP settings.</td>
    </tr>    
    <tr>
      <td>`x_forwarded_for`</td>
      <td>String Enum</td>
      <td>Use the same source IP for calling clients. Accepts `"insert"` and `"replace"`.</td>
    </tr>    
    <tr>
      <td>`ingress_ip`</td>
      <td>String</td>
      <td>IP address to use for ingress controller load balancer.</td>
    </tr>    
    <tr>
      <td>`log_settings`</td>
      <td>Map</td>
      <td>Holds parameters for configuring NCP logging.</td>
    </tr>    
    <tr>
      <td>`log_level`</td>
      <td>String Enumeration</td>
      <td>"INFO", "WARNING", "DEBUG", "ERROR", "CRITICAL"</td>
    </tr>    
    <tr>
      <td>"log_dropped_traffic"</td>
      <td>Boolean</td>
      <td>Default is `false`. Set to `true` to log dropped firewall traffic.</td>
    </tr>    
    <tr>
      <td>`ingress_persistence_settings`</td>
      <td>Map</td>
      <td>Holds parameters for customizing Layer 7 persistence.</td>
    </tr>    
    <tr>
      <td>`persistence_type`</td>
      <td>String Enum</td>
      <td>Values are `cookie` or `source_ip`.</td>
    </tr>    
    <tr>
      <td>`persistence_timeout`</td>
      <td>Integer</td>
      <td>Persistence timeout interval, in seconds.</td>
    </tr>    
    <tr>
      <td>`max_l4_lb_service`</td>
      <td>Integer</td>
      <td>Limit the maximum number of layer 4 virtual servers per cluster. Minimum is `0`.</td>
    </tr>    
    <tr>
      <td>`enable_err_crd`</td>
      <td>Boolean</td>
      <td>Enable the NSXError custom resource definion.</td>
    </tr>    
    <tr>
      <td>`nsx_ingress_controller`</td>
      <td>Boolean</td>
      <td>Flag to control if NCP is used as the Ingress Controller for the Kubernetes cluster.</td>
    </tr>    
    <tr>
      <td>`nsx_lb`</td>
      <td>Boolean</td>
      <td>Flag to control if the NSX-T Load Balancer is used for the Kubernetes cluster.</td>
    </tr>    
    <tr>
      <td>`l4_persistence_type`</td>
      <td>String Enum</td>
      <td>Connection stickiness based on `source_ip` (only accepted value).</td>
    </tr>    
    <tr>
      <td>`l4_lb_algorithm`</td>
      <td>String Enum</td>
      <td>Specify the layer 4 load balancer behavior. Accetps `"round_robin"`, `"least_connection"`, `"ip_hash"`, `"weighted_round_robin"`. Default is round robin.</td>
    </tr>    
  </table>

## <a id='ncp-example'></a> Example Network Profile for NCP Configuration

The following network profile is an example that illustrates the paramaters exposed for configuring `ncp.ini`. 

```
{
  "name": "ncp_network_profile",
  "description": "Example network profile for ncp.ini",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "x_forwarded_for": "replace",
           "ingress_ip": "192.168.160.212",
           "log_settings": {           
             "log_level": "WARNING",
             "log_dropped_traffic": true 
         	},
           "ingress_persistence_settings": {
             "persistence_type": "cookie",
             "persistence_timeout": 1 
            },
           "max_l4_service": 1,
           "enable_err_crd": true,
           "nsx_ingress_controller": true,
           "nsx_lb": false,
           "l4_persistence_type": "source_ip"
       	   }
   		}
   	}
}
```
 
## <a id='ncp-usage'></a> NCP Configuration Use Cases

This section provides use cases for each of the supported `cni_configurations` parameters.

### <a id='keep_source_ip'></a> Keep Source IP

When NCP creates a virtual server, it will assign a new IP address. This may not be the same IP address that Kubernetes pods and services are familiar with. The `keep_source_ip` parameter lets you keep the same soure IP as the original virtual server.

The `keep_source_ip` parameter type is boolean: `true` or `false`. Any other type will be rejected. Missing entry is accepted.

Example network profile for `keep_source_ip`:

```
{
  "name": "example-network-profile",
  "description": "keep_source_ip",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "keep_source_ip": true
         }
     }
  }
}
```

### <a id='ingress_ip'></a> Ingress IP

The `ingress_ip` parameter instructs NCP to create an ingress virtual server with the given IP address.

The `ingress_ip` parameter type is a string that accepts any valid IP address. Missing entry is accepted.

Example network profile for `ingress_ip`:

```
{
  "name": "example-network-profile",
  "description": "ingress_ip",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": "192.168.160.212"
         }
     }
  }
}
```

An invalid IP address is rejected with an invalid parameter value error. For example, the following network profile parameters cannot be parsed becase the 'ingress_ip': '192.168.460.212' address is an invalid IP address.

```
{
  "name": "example-network-profile",
  "description": "ingress_ip-ERROR",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": "192.168.460.212"
         }
     }
  }
}
```

The following network profile cannot be parsed because the JOSN input is invalid (not a string).

```
{
  "name": "example-network-profile",
  "description": "ingress_ip-ERROR",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": 192.168.160.212
         }
     }
  }
}
```

### <a id='log_settings'></a> Logging

The parameter `log_settings` is a map that supports two keys: `log_level` and `log_dropped_traffic`.

**log_level**

The `log_level` parameter type is a string. The `log_level` value is an enumeration that supports the following values: 

- "INFO"
- "WARNING"
- "DEBUG"
- "ERROR"
- "CRITICAL"

Any other valie results in an error.

The value is set for three ncp.ini keys: `coe.nsxlib_loglevel`, `coe.loglevel`, and `k8s.loglevel`. The default log levels for these keys are as follows:

ncp.ini key 		   | Default log level
-----------------------|-------------------
`coe.nsxlib_loglevel`  | INFO
`coe.loglevel` 		   | NONE 		
`k8s.loglevel`		   | NONE

**log_dropped_traffic**

The `log_dropped_traffic` type is a boolean: `true` or `false`. Any other type is rejected, such as "true". Missing entry is accepted. Enabling this parameter is used used in distributed firewall configurations to log the traffic for dropped rules.

Example network profile for logging:

```
{
  "name": "example-network-profile",
  "description": "log_settings",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_level": "DEBUG",
             "log_dropped_traffic": true        
           }
         }
     }
  }
}
```

### <a id='ingress_persistence_settings'></a> Ingress Persistence

The `ingress_persistence` parameter lets you customize layer 7 persistence for Kubernetes services.

The `ingress_persistence_settings` parameter is a map that supports two keys: `persistence_timeout` and `persistence_type`. These two keys are correlated and must be set/unset at the same time. If `persistence_type` and `persistence_timeout` are not both specified, the network profile fails validation.

Parameter 		   		| Data type 	| Description
------------------------|---------------|--------------------------------------------
`persistence_type`     	| String 		| Valid values are `cookie` or `source_ip`. An empty value is not accepted.
`persistence_timeout`  	| Integer 		| Value that is equal to `1` or larger. Empty value is not accepted. 		


Example 1: network profile for `ingress_persistence_settings`:

```
{
  "name": "example_network_profile",
  "description": "ingress_persistence_settings",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
             "persistence_type": "cookie",
             "persistence_timeout": 1
            }
         }
     }
  }
}
```

Example 2: network profile for `ingress_persistence_settings`:

```
{
  "name": "example_network_profile",
  "description": "ingress_persistence_settings",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
             "persistence_type": "source_ip",
             "persistence_timeout": 100
            }
         }
     }
  }
}
```

### <a id='max_l4_lb_service'></a> Max Layer 4 Load Balancer Service

The `max_l4_service` parameter sets the upper limit for the number of virtual servers per cluster (Kubernetes layer 4 services). You can use this parameter to limit the number of virtual servers that can be created per Kubernets cluster.

The `max_l4_service` data type is an integer. The value must be larger or equal to 1. Missing entry is accepted.

Example 1: network profile for `max_l4_lb_service` with the minimum allowed value:

```
{
  "name": "example_network_profile",
  "description": "max_l4_lb_service",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": 0
         }
     }
  }
}
```

Example 2: network profile for `max_l4_lb_service`:

```
{
  "name": "example_network_profile",
  "description": "max_l4_lb_service",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": 100000
         }
     }
  }
}
```

### <a id='enable_err_crd'></a> Enable Error CRD

The `enable_err_crd` parameter provides a mechanism of reporting NSX backend errors to Kubernetes cluster using a [custom resource definition (CRD)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions).

The Kubernetes resource "NSXError" is defined to hold error information. For each kubernetes resource object that has NSX backend failures, one "NSXError" object is generated with error information. There is a 'common error object' containing all cluster-wide errors.

The `enable_err_crd` data type is a boolean: `true` or `false`. Missing entry is accepted. If set to `true`, you define a CRD to handle the "NSXError" comon error object.


Example: network profile for `enable_err_crd`:

```
{
  "name": "example_network_profile",
  "description": "enable_err_crd",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "enable_err_crd": true
         }
     }
  }
}
```

### <a id='nsx_lb_ingress'></a> NSX Load Balancer and NSX Ingress Controller

The parameters `nsx_lb` and `nsx_ingress_controller` are used to control the NSX-T Load Balancer services used by Kubernetes clusters. These two flags work in conjuction with each other.

The NSX-T Load balancer is a logical load balancer that handles a number of functions using virtual servers and pools. For more information, see [Supported Load Balancer Features](https://docs.vmware.com/en/VMware-NSX-T-Data-Center/2.4/administration/GUID-91F2D574-F469-481A-AA39-CD6DBC9682CA.html) in the NSX-T documentation.

By default the following virtual servers are used by <%= vars.product_short %> with NSX-T Data Center as the CNI:

- 1 global virtual server for the Kubernetes API
- 1 TCP layer 4 virtual server for **each** Kubernetes service of `type: LoadBalancer`
- 2 layer 7 global virtual servers for the Kubernetes Ingress Controller (HTTP and HTTPS)

The `nsx_lb` parameter is used to control if the NSX-T Load Balancer will be used in a Kubernetes cluster provisioned by PKS. The default setting is `true`. As such, when you provision a Kubernetes cluster the NSX-T Load Balacer is automatically deployed. This is the Layer 4 global virtual server that fronts the Kubernetes API server, as well as a virtual server for each Kubernetes service of [type: LoadBalancer](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer). 

The `nsx_ingress_controller` parameter is used to control if NCP is used as the Ingress Controller for the Kubernetes cluster. The default setting is `true`. As such, when you define an [ingress resoure](https://kubernetes.io/docs/concepts/services-networking/ingress/) for a Kubernetes cluster, NCP (which runs on Kubenetes worker nodes), instructs the NSX-T load balancer to provision 2 layer 7 virtual services (HTTP and HTTPS) as the [Ingress Controller](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/). NCP depends on NSX-T Load Balancer to fulfill its role as an Ingress Controller. If you set this parameter to `false`, you will need to use a third-party ingress controller, such as the [NGINX Ingress Controller](https://kubernetes.github.io/ingress-nginx/).

  <table>
    <th>`nsx_lb` setting</th>
    <th>"nsx_ingress_controller": true</th>
    <th>"nsx_ingress_controller": false</th>
    <tr>
      <td>"nsx_lb": true</td>
      <td>Use the NSX-T Load Balancer == YES<br>Use the NCP Ingress Controller == YES<br>This means you want to use the NSX-T Load Balancer and NCP as the Ingress Controller.<br>Default functionality</td>
      <td>Use the NSX-T Load Balancer == YES<br>Use the NCP Ingress Controller == NO<br>This means you want to use the NSX-T Load Balancer and third-party Ingress Controller.<br>Such as [Nginx](https://kubernetes.github.io/ingress-nginx/)</td>
    </tr>
    <tr>
      <td>"nsx_lb": false</td>
      <td>Use the NSX-T Load Balancer == NO<br>Use the NCP Ingress Controller == NO<br>This is invalid because you cannot disable the NSX-T Load Balancer and use NCP as the Ingress Controller becase the latter relies on the former.<br>A network profile with this configuration will fail validation.</td>
      <td>Use the NSX-T Load Balancer == NO<br>Use the NCP Ingress Controller == NO<br>This means you want to use a third-party load balancer and a third-party ingress controller.<br>Such as [Nginx](https://kubernetes.github.io/ingress-nginx/)</td>
    </tr>
  </table>

The following network profile depicts the default behavior. Since this is the default behavior, there is no need to create a network profile such as this. We do so for illustration purposes.

```
{
  "name": "example_network_profile",
  "description": "nsx_lb and nsx_ingress_controller are enabled",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
         "nsx_lb": true,
         "nsx_ingress_controller": true
      }
    }
  }
}
```

The following network profile uses the NSX-T Load Balancer but disables the NCP Ingress Controller. Since `"nsx_lb": true` is the default, it is not included.

```
{
  "name": "example_network_profile",
  "description": "Use the nsx_lb with a 3rd party ingress controller",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
         "nsx_lb": true,
         "nsx_ingress_controller": false
      }
    }
  }
}
```

The following network profile uses a third party load balancer and a third-party ingress controller.

```
{
  "name": "example_network_profile",
  "description": "Use the nsx_lb with a 3rd party ingress controller",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
         "nsx_lb": false,
         "nsx_ingress_controller": false
      }
    }
  }
}
```

The following network profile is invalid; you cannot disable the `nsx_lb` and stil use the NCP Ingress Controller.

```
{
  "name": "example_network_profile",
  "description": "Use the nsx_lb with a 3rd party ingress controller",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
         "nsx_lb": false,
         "nsx_ingress_controller": true
      }
    }
  }
}
```

### <a id='l4_persistence_type'></a> Layer 4 Load Balancer Persistence Type

The `l4_persistence_type` is used to set connection stickiness based on `source_ip`.

The `l4_persistence_type` data type is string. The only accepted value is `source_ip`.

```
{
  "name": "example_network_profile",
  "description": "l4_persistence_type",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
        "l4_persistence_type": "source_ip"
      }
    }
  }
}
```

### <a id='l4_lb_algorithm'></a> Layer 4 Load Balancer Algorithm

The `l4_lb_algorithm` is used to set the algorithm type for the layer 4 NSX-T Load Balancer service.

The `l4_lb_algorithm` data type is string enum that accepts the following values: `"round_robin"` (default), `"least_connection"`, `"ip_hash"`, and `"weighted_round_robin"`.

For example, the following network profile specifies the `weighted_round_robin` as the load balancer algorithm.

```
{
  "name": "example_network_profile",
  "description": "l4_lb_algorithm",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
        "l4_lb_algorithm": "weighted_round_robin"
      }
    }
  }
}
```


