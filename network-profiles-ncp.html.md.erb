---
title: Defining Network Profiles for NCP Configuration
owner: PKS
---

<strong><%= modified_date %></strong>

This topic describes how to define network profiles for Kubernetes clusters provisioned with <%= vars.product_full %> on vSphere with NSX-T.

## <a id='ncp-about'></a> About NCP Configuration

<%= vars.product_full %> embeds the [NSX Container Plug-in (NCP)](https://docs.vmware.com/en/VMware-NSX-T-Data-Center/2.4/com.vmware.nsxt.ncp_kubernetes.doc/GUID-52A92986-0FDF-43A5-A7BB-C037889F7559.html). To customize and tune the configuation of NCP, <%= vars.product_full %> exposes a select group of `ncp.ini` parameters via network profile.

## <a id='ncp-params'></a> NCP Parameters

The parameter `cni_configurations` is a map with two keys: `type` and `parameters`. 

Key name 		| Data type | Default value | Behavior |
----------------|-----------|---------------|--------- |
`type` 	 		| string 	| `nsxt` 		| Constant that only accepts `nsxt` indicating that the network profile is to be used for `ncp.ini` configuration
`parameters` 	| map 		| 				| Map containing one or more key-values pairs (see below)


Parameters accepts 

Key name 						| Data type 					| Default value   								| Behavior
--------------------------------|---------------------------|---------------------------------------------------|---------
`keep_source_ip` 				| boolean 					| none 												| Set INSERT for `x_forwarded_for`.
`ingress_ip` 					| string 					| none 												| NCP will create an ingress virtual server with the given IP address.
`log_settings` 					| map[string]interface{} 	| log_level: none; log_dropped_traffic: false 		| Customize loglevel; Customize if Distributed Firewall "Deny" is logged.
`ingress_persistence_settings` 	| map[string]interface{} 	| persistence_type: none; persistence_timeout: none | Customize parameters for L7 persistence.
`max_l4_service` 				| integer 					| none (default value in NCP code) 					| Upper limit of virtual servers per cluster (Kubernetes L4 services).
`enable_err_crd` 				| boolean 					| false 											| Enable the NSXError custom resource definion.
`nsx_ingress_controller` 		| boolean 					| true 												| Use NSX ingress controller.
`nsx_lb` 						| boolean 					| true 												| Use NSX-T native load balancer.
`l4_persistence_type` 			| string(enumeration) 		| none 												| Connection stickiness based on `source_ip` (only accepted value).


## <a id='ncp-example'></a> Example Network Profile for NCP Configuration

The following network profile is an example that illustrates the paramaters exposed for configuring `ncp.ini`. 

```
{
  "name": "ncp_network_profile",
  "description": "Example network profile for ncp.ini",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "keep_source_ip": true,
           "ingress_ip": "192.168.160.212",
           "log_settings": {           
             "log_level": "Verbose",
             "log_dropped_traffic": true 
         	},
           "ingress_persistence_settings": {
             "persistence_type": "cookie",
             "persistence_timeout": 1 
            },
           "max_l4_service": 1,
           "enable_err_crd": true,
           "nsx_ingress_controller": true,
           "nsx_lb": false,
           "l4_persistence_type": "source_ip"
       	   }
   		}
   	}
}
 
## <a id='ncp-usage'></a> NCP Configuration Use Cases

A new parameter is added into network profile, called "cni_configurations". Itâ€™s a map with two keys.


### <a id='keep_source_ip'></a> Keep Source IP



### <a id='ingress_ip'></a> Ingress IP

Its type is an valid IP string, any other value type will be rejected. Invalid ip address will be rejected. Missing entry is accepted.

Success scenarios
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": "192.168.160.212"
         }
     }
  }
}
Result: Network profile hello successfully created

Failure scenarios
Invalid ip address
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": "192.168.460.212"
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'ingress_ip': '192.168.460.212', expect valid ip address for ingress_ip: invalid parameter value
Other type
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": 192.168.160.212
         }
     }
  }
}

Result: Error: failed to parse network profile JSON input: invalid character '.' after object key:value pair


### <a id='log_settings'></a> Logging

### log_settings

Its type is map[string]interface{}, any other type will be rejected. Missing entry is accepted, empty value is accepted.
Success scenarios
Empty value
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
           }
         }
     }
  }
}

Result: Network profile hello successfully created
Failure scenarios
unsupported key
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_something": "a"
           }
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'log_settings': 'map[log_something:a]', in log_settings: log_something: unsupported parameter


It only supports two keys: log_dropped_traffic and log_level.

log_dropped_traffic
Its type is boolean, its behavior is the same as "keep_source_ip". Missing entry is accepted.
log_level
Its type is string. Its value is enumeration, that takes value only from following values: "INFO,WARNING,DEBUG,ERROR,CRITICAL". Missing entry is accepted. The value will actually be set for three ncp.ini keys: coe.nsxlib_loglevel, coe.loglevel, k8s.loglevel.
Success scenarios
Valid string value
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_level": "INFO"
           }
         }
     }
  }
}

Result: Network profile hello successfully created
Failure scenarios
Invalid string value
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_level": "Verbose"
           }
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'log_settings': 'map[log_level:Verbose]', expect any value in list INFO,WARNING,DEBUG,ERROR,CRITICAL, but get Verbose: invalid parameter value

Other type
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_level": 10
           }
         }
     }
  }
}

Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'log_settings': 'map[log_level:10]', expect string for log_level, but get int: 10: wrong parameter type

### <a id='ingress_persistence_settings'></a> Ingress Persistence

The `Ingress_persistence_settings` is a `map[string]interface{}` thta supports two keys: `persistence_timeout` and `persistence_type`.

These two keys are correlated thus they have to be both set/unset at the same time.

* `persistence_type` -- Its type is a string with valid values `cookie` or `source_ip`. An empty value is not accepted.
* `persistence_timeout`` -- Its type is integer that is larger or equal to `1`. Empty value is not accepted.

If `persistence_type` and `persistence_timeout` are not both specified, the network profile fails cni configuration parameter validation.

```
{
  "name": "example_network_profile",
  "description": "ingress_persistence_settings",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
             "persistence_type": "cookie",
             "persistence_timeout": 1
            }
         }
     }
  }
}
```

```
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_persistence_settings": {
             "persistence_type": "source_ip",
             "persistence_timeout": 100
            }
         }
     }
  }
}
```


### <a id='max_l4_service'></a> Max Layer 4 Service

Its type is integer, any other type will be rejected. Value has to be larger or equal to 1. Missing entry is accepted.

Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": 1
         }
     }
  }
}

Result: Network profile hello successfully created
Integer larger than 1
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": 100000
         }
     }
  }
}
Result: Network profile hello successfully created
Note: there is no upper limit validation at this time.
failure scenarios
Integer less than 1
Example network profile
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": 0
         }
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'max_l4_service': '0', expect positive number(>=1) for max_l4_service: invalid parameter value
Other types
Example network profile:
{
  "name": "hello",
  "description": "world",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "max_l4_service": "1"
         }
     }
  }
}
Result: Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'max_l4_service': '1', expect integer for max_l4_service, but get string: 1: wrong parameter type

### <a id='enable_err_crd'></a> Enable Error CRD

## enable_err_crd

Its type is boolean, any other type will be rejected. Missing entry is accepted.
The same as "keep_source_ip"


### <a id='nsx_ingress_controller'></a> NSX Ingress Controller

The same as "keep_source_ip".

Note: when nsx_lb is false, nsx_ingress_controller can only be set to false.

kubo@jumper:~$ cat np.json
{
  "name": "test",
  "description": "cni parameters",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
         "nsx_lb": false,
         "nsx_ingress_controller": true
      }
    }
  }
}

kubo@jumper:~$ pks create-network-profile np.json

Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation on keys 'nsx_ingress_controller,nsx_lb': nsx_ingress_controller can only be set to false when nsx_lb is false: invalid parameter value

### <a id='nsx_lb'></a> NSX Load Balancer

## NSX Load Balancer

The same as "keep_source_ip"

### <a id='l4_persistence_type'></a> Layer 4 Persistence Type

## L4_persistence_type

Its type is string, only value "source_ip" is accepted.
Success scenarios
kubo@jumper:~$ pks create-network-profile np.json


Network profile test-3 successfully created

kubo@jumper:~$ cat np.json
{
  "name": "test-3",
  "description": "cni parameters",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
        "l4_persistence_type": "source_ip"
      }
    }
  }
}
kubo@jumper:~$ pks cluster k8s4

Name:                     k8s4
Plan Name:                small
UUID:                     2e6a1dac-bd8b-4a4b-82b0-389c19a66834
Last Action:              CREATE
Last Action State:        in progress
Last Action Description:  Instance provisioning in progress
Kubernetes Master Host:   k8s4
Kubernetes Master Port:   8443
Worker Nodes:             1
Kubernetes Master IP(s):  In Progress
Network Profile Name:     test-3

kubo@jumper:~$ pks network-profile test-3

Name:         test-3
UUID:         5a0791da-e50e-49e7-8780-ddbc1ea75926
Description:  cni parameters
Parameters:   {"cni_configurations":{"parameters":{"l4_persistence_type":"source_ip"},"type":"nsxt"}}

kubo@jumper:~$ bosh -d service-instance_2e6a1dac-bd8b-4a4b-82b0-389c19a66834 ssh master "sudo su -c 'cat  /var/vcap/jobs/ncp/config/ncp.ini'" | grep 'l4_persistence'
master/3cd9b504-c146-4c68-9e55-7ff1b85e30be: stdout | l4_persistence = source_ip

Failure scenarios
kubo@jumper:~$ pks create-network-profile np.json

Error: The network profile parameters could not be parsed: network profile is invalid: fails cni configurations validation: failed cni configuration parameter validation 'l4_persistence_type': 'source', expect any value in list source_ip, but get source: invalid parameter value
kubo@jumper:~$ cat np.json
{
  "name": "test-3",
  "description": "cni parameters",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
        "l4_persistence_type": "source"
      }
    }
  }
}


















