---
title: Configuring Ingress Routing and Load Balancing for PKS with NSX-T
owner: PKS-NSX-T
---

<strong><%= modified_date %></strong>

This section provides example configurations for ingress routing (Layer 7) and load balancing (Layer 4) for your PKS-provisioned Kubernetes clusters.

<p class="note"><strong>Note:</strong> The examples provided are for PKS with NSX-T and are based on NCP v2.3.2.</p>

##<a id='nsxt-ingress'></a> Ingress Routing

A Kubernetes ingress resource exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the ingress resource. See the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource) for more information about ingress resources.

The NSX-T load balancer that is automatically provisioned by PKS provides two layer 7 virtual servers for Kubernetes ingress resources, one for HTTP and the other for HTTPS. For more information, see [Supported Load Balancer Features](https://docs.vmware.com/en/VMware-NSX-T-Data-Center/2.3/com.vmware.nsxt.admin.doc/GUID-91F2D574-F469-481A-AA39-CD6DBC9682CA.html) in the NSX-T documentation.

Ingress resource configuration is defined in the manifest of your Kubernetes deployment. Wildcard DNS entries are needed to route traffic to the exposed ingress resource.

### Example Ingress Resource

The following example ingress resource can be used with a PKS-provisioned cluster deployed with NSX-T. You must include both a hostname (`host`) and URI (`path`) in the ingress definition. In this example ingress requests will be sent to `http://test.com/testpath` where the the HTTP Virtual Server is listening. 


```
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: svc-ingress
spec:
  rules:
  - host: test.com
    http:
      paths:
      - path: /testpath
          backend:
            serviceName: svc-ingress
            servicePort: 80
```


##<a id='nsxt-lb'></a> Load Balancer Service

When deploying a Kubernetes service of type LoadBalancer, NSX-T automatically creates a new virtual IP address (VIP) on the existing load balancer for that namespace. 

### Load Balancer Example

The Kubernetes load balancer service definition supports an integer or a string value for the named `targetPort` attribute, such as `8080` or `http`. For more information, see [Type LoadBalancer](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) in the Kubernetes documentation.

With NCP 2.3.2 and earlier, the named `targetPort` must be an integer, not a string. In other words, if you are implementing a service of type load balancer with NSX-T, the value of `targetPort` must be a port number, not a port name.

The following example shows an load balancer service definition for a PKS-provisioned cluster with NSX-T. You must specify a listening and translation port in the service, along with a name for tagging. You must also specify a protocol to use. The `targetPort` value must be of type integer for the service to have LoadBalancer members.

``` 
kind: Service
apiVersion: v1
metadata:
  name: test-service
spec:
  type: LoadBalancer
  selector:
    app: testApp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
    name: web
```


