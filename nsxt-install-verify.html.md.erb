---
title: Verifying Tanzu Kubernetes Grid Integrated Edition Installation on vSphere with NSX-T
owner: TKGI-NSXT
---

This topic provides general instructions for verifying the installation of an NSX&#x2011;T VM, either an NSX&#x2011;T 
Manager VM or an NSX&#x2011;T Edge Node VM, that you have deployed for use with <%= vars.product_short %>.

##<a id='prerequsisites'></a> Prerequisites

The following procedures must be executed from an SSH session into your Ops Manager.
For information about creating an SSH key pair for Ops Manager v2.6 and later, see one of the following:

* [Generate an SSH key pair for installing Ops Manager v2.6 on vSphere](https://community.pivotal.io/s/article/generate-an-ssh-key-pair-for-installing-ops-manager-v2-6-on-vsphere) in the Knowledge Base
* [How to generate an SSH key pair for installing Ops Manager v2.6 on vSphere (71143)](https://kb.vmware.com/s/article/71143) in the VMware Support Knowledge Base

##<a id='cli-install'></a> Install the <%= vars.k8s_runtime_abbr %> and Kubectl CLIs

You will manage your environment using the <%= vars.product_short %> Command Line Interface (<%= vars.k8s_runtime_abbr %> CLI) and
the Kubernetes CLI (kubectl). Complete the following steps to deploy the <%= vars.k8s_runtime_abbr %> and Kubernetes CLIs.  

1. To copy CLIs to your Ops Manager using SCP, run the following PSCP commands:  

    ```
    pscp c:\temp\tkgi-linux-amd64-TKGI-VERSION ubuntu@IP-ADDRESS:/home/ubuntu/tkgi
    pscp c:\temp\kubectl-linux-amd64-STEMCELL-VERSION ubuntu@IP-ADDRESS:/home/ubuntu/tkgi
    ```

    Where:
    * `TKGI-VERSION` is your <%= vars.k8s_runtime_abbr %> build ID.  
    * `STEMCELL-VERSION` is your stemcell version ID. 
    * `IP-ADDRESS` is the IP Address for Ops Manager host.   
  
    For example:
    <pre class="terminal">
    $ pscp c:\temp\tkgi\tkgi-linux-amd64-1.7.0-build.16 ubuntu<span>@</span>10.197.79.152:/home/ubuntu/tkgi
    $ pscp c:\temp\tkgi\kubectl-linux-amd64-1.16.7 ubuntu<span>@</span>10.197.79.152:/home/ubuntu/tkgi
    </pre>

1. To make the CLIs executable, run the following command:  

    ```
    chmod +x tkgi-linux-amd64-VERSION
    chmod +x kubectl-linux-amd64-VERSION
    ```

    Where:
    * `TKGI-VERSION` is your <%= vars.k8s_runtime_abbr %> build ID.  
    * `STEMCELL-VERSION` is your stemcell version ID. 

    For example:
    <pre class="terminal">
    $ chmod +x tkgi-linux-amd64-1.7.0-build.16
    $ chmod +x kubectl-linux-amd64-1.16.7
    </pre>

1. To rename and move the files to your PATH, run the following commands:  

    ```
    sudo mv tkgi-linux-amd64-VERSION /usr/local/bin/tkgi
    sudo mv kubectl-linux-amd64-VERSION /usr/local/bin/kubectl
    ```

    Where:
    * `TKGI-VERSION` is your <%= vars.k8s_runtime_abbr %> build ID.  
    * `STEMCELL-VERSION` is your stemcell version ID. 

    For example:
    <pre class="terminal">
    $ sudo mv tkgi-linux-amd64-1.7.0-build.16 /usr/local/bin/tkgi
    $ sudo mv kubectl-linux-amd64-1.16.7 /usr/local/bin/kubectl
    </pre>

##<a id='uaac-manage'></a> Manage User Accounts Using UAA

You will manage accounts and authentication using User Account and Authentication (UAA) and the UAA Command Line Interface (UAAC). 

####<a id='uaac-install'></a> Install UAAC and Configure UAA

Complete the following steps to deploy UAAC and UAA.  

1. To install UAAC, run the following commands:  

    ```
    cd /usr/local/bin
    sudo apt -y install ruby ruby-dev gcc build-essential g++
    sudo gem install cf-uaac
    ```

1. To verify installation, run the following command:  

    ```
    uaac -v
    ```

1. To add <%= vars.control_plane %> hostname and IP address to a DNS server, complete the following steps:  
    1. Retrieve the DNS server IP address from vSphere.  
    1. Retrieve the <%= vars.control_plane %> Hostname from the **<%= vars.k8s_runtime_abbr %> tile** > **<%= vars.control_plane %>** > **API Hostname (FQDN)**.  
    1. Add the DNS server IP address and the <%= vars.control_plane %> Hostname to the `/etc/hosts` file using the following format:  

        ```
        IP-ADDRESS HOSTNAME
        ```

        Where:  
        * `IP-ADDRESS` is the DNS Server IP Address.  
        * `TKGI-HOSTNAME` is the <%= vars.control_plane %> Hostname.  

        For example:
        <pre class="terminal">
        $ vi /etc/hosts
        127.0.0.1 localhost
        ...
        10.0.0.7 api.tkgi.vsphere.local
        </pre>

1. To target <%= vars.k8s_runtime_abbr %>, run the following UAAC command:  

    ```
    uaac target https://TKGI-HOSTNAME:8443 --skip-ssl-validation
    ```

    Where `TKGI-HOSTNAME` is the <%= vars.control_plane %> Hostname.  

    For example:
    <pre class="terminal">
    $ uaac target https<span>:</span>//api.comet.tkgi.local:8443 --skip-ssl-validation
    Unknown key: Max-Age = 86400
    Target: https<span>:</span>//api.comet.tkgi.local:8443
    </pre>

1. To retrieve the UAA admin secret, complete the following steps:  

    1. Retrieve the token from Ops Manager: **<%= vars.k8s_runtime_abbr %> Tile** > **Credentials** > **Pks Uaa Management Admin Client**.  
    1. Click **Link to Credential**.  
    1. Copy the `secret` value.   

1. To fetch the UAA admin token, run the following command:  

    ```
    uaac token client get admin -s SECRET
    ```

    Where `SECRET` is the secret copied in the preceding step.

    For example:
    <pre class="terminal">
    $ uaac token client get admin -s syMZA-FUlvdEXgXrgI-SDmkUVuP5rlzA
    Unknown key: Max-Age = 86400
    Successfully fetched token via client credentials grant.
    Target: https<span>:</span>//api.comet.tkgi.local:8443
    Context: admin, from client admin
    </pre>

####<a id='users-add'></a> Add <%= vars.k8s_runtime_abbr %> Admin Users to UAA 

Complete the following steps to add the tkgi-admin and k8s-admin admin accounts to UAA. 

1. To add the <%= vars.k8s_runtime_abbr %> Admin user to UAA, run the following commands:

    ```
    uaac user add tkgi-admin --emails ADMIN-EMAIL-ADDRESS -p PASSWORD
    uaac member add pks.clusters.admin tkgi-admin
    ```

    Where:
    * `ADMIN-EMAIL-ADDRESS` is the email address for the admin user account.  
    * `PASSWORD` is the password for the user account.  

    For example:
    <pre class="terminal">
    $ uaac user add tkgi-admin --emails tkgi-admin<span>@</span>example.com -p aZ1by2cX3d4!
    user account successfully added 

    $ uaac member add pks.clusters.admin tkgi-admin
    success
    </pre>

1. To add the <%= vars.k8s_runtime_abbr %> Manage user to UAA, run the following commands:  

    ```
    uaac user add k8s-admin --emails MANAGE-EMAIL-ADDRESS -p PASSWORD
    uaac member add pks.clusters.manage k8s-admin
    ```

    Where:
    * `MANAGE-EMAIL-ADDRESS` is the email address for the <%= vars.k8s_runtime_abbr %> Manage user account.  
    * `PASSWORD` is the password for the user account. 

    For example:  
    <pre class="terminal">
    $ uaac user add k8s-admin --emails k8s-admin<span>@</span>example.com -p aZ1by2cX3d4!
    user account successfully added
    
    $ uaac member add pks.clusters.manage k8s-admin
    success
    </pre>


####<a id='tkgi-login'></a> Log In to <%= vars.k8s_runtime_abbr %> 

Validate the new UAA admin account by logging in to <%= vars.k8s_runtime_abbr %>.  

1. To log in to <%= vars.k8s_runtime_abbr %> as `tkgi-admin` run the following command:  

    ```
    tkgi login -a "TKGI-HOSTNAME" -u "tkgi-admin" -p "PASSWORD" -k
    ```

    Where:  
    * `TKGI-HOSTNAME` is the <%= vars.control_plane %> Hostname.
    * `PASSWORD` is the password for the user account.  

    For example:
    <pre class="terminal">
    $ tkgi login -a "api.tkgi.vsphere.local" -u "tkgi-admin" -p "aE1ry2cJ3d2!" -k
    <br>
    API Endpoint: api.tkgi.vsphere.local
    User: tkgi-admin
    Login successful.
    </pre>

1. To log in to <%= vars.k8s_runtime_abbr %> as `k8s-admin` run the following command: 

    ```
    tkgi login -a "TKGI-HOSTNAME" -u "k8s-admin" -p "PASSWORD" -k
    ```

    Where:  
    * `TKGI-HOSTNAME` is the <%= vars.control_plane %> Hostname.
    * `PASSWORD` is the password for the user account.

    For example:
    <pre class="terminal">
    $ tkgi login -a "api.comet.tkgi.local" -u "k8s-admin" -p "rtXare1!" -k
    
    API Endpoint: api.comet.tkgi.local
    User: k8s-admin
    Login successful.
    </pre>

##<a id='bosh-verify'></a> Manage <%= vars.k8s_runtime_abbr %> Using BOSH

####<a id='bosh-alias'></a> Create a BOSH Alias 

1. To create a BOSH alias, complete one of the following:  
    * To create a BOSH alias using the `alias` command, complete the following:  
        1. Go to **BOSH Director tile** > **Credentials** > **Bosh Commandline Credentials**.
        1. Click **Link to Credential**.
        1. Copy the `credential` string, including the surrounding double quotes.  
        1. To create a BOSH alias run the following command:

            ```
            alias bosh=CREDENTIAL-STRING  
            ```
            Where:
            * `CREDENTIAL-STRING` is the entire `credential` string from the **Bosh Commandline Credentials**, including the surrounding double quotes.  

            For example:  
            <pre class="terminal">
            $ alias bosh="BOSH_CLIENT=ops_manager BOSH_CLIENT_SECRET=sNc1itad BOSH_CA_CERT=/var/tempest/workspaces/default/root_ca_certificate BOSH_ENVIRONMENT=ip-from-bosh_commandline_credentials bosh"
            </pre>
    * To create a BOSH alias using the `source` command, complete the following:  
        1. Go to **BOSH Director tile** > **Credentials** > **Bosh Commandline Credentials**.
        1. Click **Link to Credential**.
        1. Copy the `credential` string content.   
        1. Create a file named `bosh_evn.sh` with the following modified `credential` string content:  

            ```
            export BOSH_CLIENT=BOSH-CLIENT
            export BOSH_CLIENT_SECRET=BOSH-CLIENT-SECRET
            export BOSH_CA_CERT=BOSH-CA-CERT
            export BOSH_ENVIRONMENT=BOSH-ENVIRONMENT-IP
            alias om=om-linux
            ```
  
            Where:  
            * `BOSH-CLIENT` is the `BOSH_CLIENT` value from the BOSH command line credentials.  
            * `BOSH-CLIENT-SECRET` is the `BOSH_CLIENT_SECRET` value from the BOSH command line credentials.  
            * `BOSH-CA-CERT` is the `BOSH_CA_CERT` path value from the BOSH command line credentials.  
            * `IP-ADDRESS-OF-BOSH` is the `BOSH_ENVIRONMENT` IP Address value from the BOSH command line credentials.  

            For example:  

            ```
            export BOSH_CLIENT=ops_manager 
            export BOSH_CLIENT_SECRET=sgFGsM_cOPrw5IhrIeIX1JDFxPR6LcgR 
            export BOSH_CA_CERT=/var/tempest/workspaces/default/root_ca_certificate 
            export BOSH_ENVIRONMENT=10.0.16.5 
            ```
        1. Run the following command:  

            ```
            source bosh_env.sh
            ```

####<a id='bosh-deployments'></a> List BOSH Deployments 

1. To retrieve a list of BOSH deployments, run the following command:  

    ```
    bosh deployments
    ```

####<a id='bosh-vms'></a> List BOSH VMs 
1. To retrieve a list of BOSH VMs, run the following command:  

    ```
    bosh vms
    ```

####<a id='bosh-components'></a> List BOSH Components 
1. To retrieve a list of bosh components. run the following command:  

    ```
    bosh releases
    ```

####<a id='bosh-alias'></a> Use BOSH to SSH to a Kubernetes Node 
1. To SSH to a Kubernetes node, run the following command:

    ```
    bosh ssh -d 'SERVICE-ID' DESTINATION-ID
    ```

    Where:
    * `SERVICE-ID` is your node's service instance id.  
    * `DESTINATION-ID` is your destination host's ID. For example, you can provide an ID such as a
    master host, UAA host or Diego Cell ID as a destination. For more information about `bosh ssh`, 
    see [SSH](https://bosh.io/docs/cli-v2/#ssh-mgmt) in the _BOSH Commands_ documentation.

    For example:
    <pre class="terminal">
    $ bosh ssh -d 'service-instance\_9dd62330-fcea-469f-a50d-27c746622662' master/b1f99643-6905-4427-a01c-c26fc9101d40
    </pre>

####<a id='bosh-delete'></a> Use BOSH to Delete a Kubernetes Cluster 
If you want to delete a Kubernetes cluster that failed to deploy, and you cannot delete the cluster using the <%= vars.k8s_runtime_abbr %> CLI, you can delete the cluster using BOSH.  

1. To delete a Kubernetes cluster, run the following command:  

    ```
    bosh -e tkgi delete-deployment -d SERVICE-ID
    ```

    Where `SERVICE-ID` is your node's service instance id.  

    For example:
    <pre class="terminal">
    $ bosh -e tkgi delete-deployment -d service-instance_3bd9069f-aafd-4525-a145-f3e48570c055
    </pre>

##<a id='k8s-creds'></a> Manage a Kubernetes Cluster using <%= vars.k8s_runtime_abbr %> and Kubernetes

You can manage your Kubernetes clusters using both <%= vars.k8s_runtime_abbr %> and Kubernetes command line commands.

####<a id='cluster-creds'></a> Retrieve Cluster Credentials

1. To retrieve your Kubernetes cluster credentials, run the following:  

    ```
    tkgi get-credentials CLUSTER-NAME
    ```

    Where `CLUSTER-NAME` is the name of your cluster.  

####<a id='k8s-config-file'></a> Validate the Kubernetes Configuration File 

1. To verify that the Kubernetes configuration file exists, run the following command:  

    ```
    ls -l ~/.kube/config
    ```

####<a id='k8s-creds'></a> Connect to Kubernetes Cluster 

To manage a Kubernetes cluster using Kubernetes CLI commands, you must first connect to the cluster.

1. Retrieve your Kubernetes cluster credentials. For more information, see [Retrieve Cluster Credentials](#cluster-creds) above.  
1. Verify that the Kubernetes configuration file exists. For more information, see [Validate the Kubernetes Configuration File](#k8s-config-file) above.   
1. To create a DNS record for the Kubernetes cluster and master node IP address, complete the following steps:
    1. Run the following command to get the information:

        ```
        tkgi cluster CLUSTER-NAME
        ```

    1. Locate the "Kubernetes Master Host" and "Kubernetes Master IP(s)" values.
    1. To create a DNS record, create or modify the `/etc/hosts` file to have a new line using these values:

        ```
        MASTER-IP MASTER-HOST
        ```

        Where:
        * `MASTER-IP` is the Kubernetes Master IP(s) collected in the preceding step.
        * `MASTER-HOST` is the Kubernetes Master Host collected in the preceding step.

        For example:  
        <pre class="terminal">
        $ vi /etc/hosts
        10.197.100.130 tea-cluster
        </pre>

1. To connect to the Kubernetes cluster, run the following command:  

    ```
    kubectl config use-context CLUSTER-NAME
    ```

1. To confirm your connection list your cluster nodes. For more information see 
[List Kubernetes Cluster Nodes](#k8s-list-nodes) below.


####<a id='k8s-list-nodes'></a> List Kubernetes Cluster Nodes

1. To list the cluster nodes of the currently connected Kubernetes cluster, run the following command:  

    ```
    kubectl get nodes
    ```
    