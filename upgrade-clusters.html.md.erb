---
title: Upgrading Clusters
owner: PKS
---

This topic describes how to upgrade Kubernetes clusters provisioned by <%= vars.product_full %>. 

Upgrading a cluster makes the cluster's internal PKS version match your PKS control plane's PKS version.

For information about updating clusters, which modifies a cluster's configuration, 
see [pks update-cluster] (./cli/index.html#update-cluster) in the _PKS CLI_ documentation.

##<a id='when'></a>When Clusters Upgrade

<%= vars.product_short %>-deployed Kubernetes clusters upgrade when:

* You upgrade the <%= vars.product_short %> tile with the **Errands** pane > **Upgrade all clusters errand** checkbox enabled.
  - See [Full vs Tile-Only Upgrades](./understanding-upgrades.html#types) in the _<%= vars.product_short %> Upgrades_ topic.
* You run `pks upgrade-cluster` or `pks upgrade-clusters` as described in [Upgrade Clusters](#upgrade-clusters) below.

## <a id="what"></a>What Happens During Cluster Upgrades

During an upgrade of the <%= vars.product_tile %> tile and <%= vars.product_short %>-provisioned clusters, each of your Kubernetes clusters is recreated, one at a time. This includes the following stages for each cluster:

1. Master nodes are recreated. For more information, see [Master Nodes](#master-recreated).
1. Worker nodes are recreated. For more information, see [Worker Nodes](#worker-recreated).

  <p class="note"><strong>Note</strong>: When <%= vars.product_short %> performs a full upgrade, and upgrades <%= vars.product_short %>-provisioned clusters with a new Linux or Windows stemcell,
  it rolls every Linux or Windows VM in each Kubernetes cluster.
  This automatic rolling ensures that all your VMs are patched. To avoid workload downtime, use the resource configuration recommended in the <a href="#master-recreated">Master Nodes</a> and <a href="#worker-recreated">Worker Nodes</a> sections below and
  in <a href="./maintain-uptime.html">Maintaining Workload Uptime</a>.</p>

These recreations may cause [Master Nodes Outage](#master) or [Worker Nodes Outage](#worker), depending on the cluster's configuration, as described below.

###<a id="master"></a>Master Nodes Outage

When <%= vars.product_short %> recreates a single-master cluster during an upgrade, you cannot interact with your cluster, use `kubectl`, or push new workloads.

<p class="note"><strong>Note</strong>: To avoid this loss of functionality, <%= vars.recommended_by %> recommends using multi-master clusters.</p>

###<a id="worker"></a>Worker Nodes Outage

When <%= vars.product_short %> recreates worker nodes, the upgrade runs on a single VM at a time. During the upgrade, the VM stops running containers. If your workloads run on a single VM, your apps will experience downtime.

When worker nodes are recreated, <%= vars.product_short %> upgrades Kubernetes to the version shipped with the <%= vars.product_tile %> tile. See the <%= vars.product_short %> [Release Notes](./release-notes.html).

<p class="note"><strong>Note</strong>: To avoid downtime for stateless workloads, <%= vars.recommended_by %> recommends using at least one worker node per availability zone (AZ). For stateful workloads, <%= vars.recommended_by %> recommends using a minimum of two worker nodes per AZ.</p>

##<a id='upgrade-clusters'></a>Upgrade Clusters

After upgrading your <%= vars.product_tile %> tile, you can upgrade individual or multiple 
clusters using the following procedures:

* [Upgrade a Single Kubernetes Cluster](#upgrade-cluster)  
* [Upgrade Multiple Kubernetes Clusters](#upgrade-clusters-multi)

To monitor or stop a cluster upgrade, follow the procedures in 
[Manage Your Kubernetes Cluster Upgrade Job](#manage-upgrade), below.

###<a id='upgrade-cluster'></a>Upgrade a Single Cluster

The <%= vars.product_short %> CLI provides `upgrade-cluster` for upgrading an individual <%= vars.product_tile %>-provisioned 
Kubernetes cluster. 

To upgrade an individual Kubernetes cluster, 
run the following command:

```
pks upgrade-cluster CLUSTER-NAME
```
Where `CLUSTER-NAME` is the name of the Kubernetes cluster you want to upgrade.

To upgrade multiple clusters, see [Upgrade Multiple Kubernetes Clusters](#upgrade-clusters-multi), below.  

For more information about the `pks upgrade-cluster` command, see [pks upgrade-cluster](cli/index.html#upgrade-cluster) in the _PKS CLI_ documentation.    

###<a id='upgrade-clusters-multi'></a>Upgrade Multiple Clusters

The <%= vars.product_short %> CLI provides `upgrade-clusters` for upgrading multiple <%= vars.product_tile %>-provisioned 
Kubernetes clusters. 
You can upgrade clusters serially, serially with some clusters designated as canary clusters, or entirely in parallel.  

To upgrade a single cluster, see [Upgrade a Single Kubernetes Cluster](#upgrade-cluster) above.

For more information about the `pks upgrade-clusters` command, see [pks upgrade-clusters](cli/index.html#upgrade-clusters) in the _PKS CLI_ documentation.    

####<a id='upgrade-clusters-parallel'></a> Upgrade Clusters in Parallel

To upgrade multiple Kubernetes clusters, run the following command:

```
pks upgrade-clusters --clusters CLUSTER-NAMES --max-in-flight CLUSTER-COUNT --wait
```
Where:

* `CLUSTER-NAMES` is a comma-delimited list of the names of the Kubernetes clusters you want to upgrade. 

* `CLUSTER-COUNT` is the maximum number of clusters to upgrade in parallel within an an AZ.  
    * If the `CLUSTER-NAMES` list is longer than the `CLUSTER-COUNT`, the first set of clusters are upgraded in parallel and
    subsequent clusters are queued and then upgraded in parallel as the preceding cluster upgrades complete.  
    * If an upgrade fails for a cluster in the `CLUSTER-NAMES` list, the job continues to a subsequent cluster in the list.  
    * To run the cluster upgrade job as a background task, remove the `--wait` argument.

    <p class="note"><strong>Note:</strong> Run <code>upgrade-clusters</code> with a <code>--max-in-flight</code> 
      argument less than your BOSH Director > Director Config > <strong>Director Workers</strong> value. 
      For example, if your <strong>Director Workers</strong> value remains the default of <code>5</code>, 
      run <code>upgrade-clusters</code> with a <code>--max-in-flight</code> argument value less than <code>5</code>.
    </p>

    <p class="note"><strong>Note:</strong> <code>max-in-flight</code> is an optional argument. 
      If <code>max-in-flight</code> is not set, <%= vars.product_short %> uses the default 
      <code>max-in-flight</code> value of <code>1</code> and the clusters are upgraded serially.
    </p>

For example:

<pre class="terminal">
$ pks upgrade-clusters --clusters k8-cluster-000,k8-cluster-001,k8-cluster-002 --max-in-flight 2  --wait
<br>
You are about to upgrade k8-cluster-000, k8-cluster-001 and k8-cluster-002.
Warning: This operation may be long running and may block further operations on the cluster(s) until complete
<br>
Continue? (y/n):y
Your taskID for the upgrade task is: d772aba0-2670-4fba-b26c-044b19d6ab60
Started upgrading cluster: k8-cluster-000
Started upgrading cluster: k8-cluster-001
Finished upgrading cluster: k8-cluster-000
Started upgrading cluster: k8-cluster-002
Finished upgrading cluster: k8-cluster-001
Finished upgrading cluster: k8-cluster-002
Upgrade task d772aba0-2670-4fba-b26c-044b19d6ab60 is done.
</pre>

####<a id='upgrade-clusters-errors'></a> Upgrade Clusters With Canaries

To upgrade multiple clusters and automatically stop upgrading clusters if a cluster upgrade fails, 
specify your cluster list as canary clusters. 
You can specify one or more clusters as canary clusters.  

To upgrade multiple clusters with one or more canary clusters, run the following command:

```
pks upgrade-clusters --canaries CANARY-CLUSTER-NAMES --clusters CLUSTER-NAMES --wait
```
Where:

* `CANARY-CLUSTER-NAMES` is a comma-delimited list of the names of the Kubernetes clusters you want to upgrade as canary clusters. 

* `CLUSTER-NAMES` is a comma-delimited list of Kubernetes clusters to upgrade if all canary clusters successfully upgrade.
    * The specified canary clusters are upgraded prior to upgrading the clusters in your `CLUSTER-NAMES` list.  
    * Canary clusters are always upgraded serially.
    * If an upgrade fails for a canary cluster, the entire `upgrade-clusters` job stops. 
    * If an upgrade fails for a cluster in the `CLUSTER-NAMES` list, the `upgrade-clusters` job continues to a subsequent cluster in the list.  
    * To run the cluster upgrade job as a background task, remove the `--wait` argument.  

    <p class="note"><strong>Note:</strong> <code>--clusters</code> is a required argument. 
    To configure <code>upgrade-clusters</code> to stop for any cluster upgrade failure, 
    specify only one cluster in your <code>CLUSTER-NAMES</code> list and 
    the remaining clusters in your <code>CANARY-CLUSTER-NAMES</code> list.
    </p>

    <p class="note"><strong>Note:</strong> Canary clusters are always upgraded serially. 
      Only the clusters specified in the <code>--clusters</code> list are upgraded in parallel 
      when you run <code>upgrade-clusters</code> with both <code>--canaries</code> and 
      <code>--max-in-flight</code> arguments.
    </p>

For example:

<pre class="terminal">
$ pks upgrade-clusters --canaries k8-cluster-dev,k8-cluster-000,k8-cluster-001  --clusters k8-cluster-002  --wait
<br>
You are about to upgrade k8-cluster-dev k8-cluster-000, k8-cluster-001 and k8-cluster-002.
Warning: This operation may be long running and may block further operations on the cluster(s) until complete

Continue? (y/n):y
Your taskID for the upgrade task is: ce31a1bb-380a-453f-afa0-835ffa1ce6ac
Started upgrading cluster: k8-cluster-000
Upgrading cluster succeeded: k8-cluster-000
Started upgrading cluster: k8-cluster-001
Upgrading cluster succeeded: k8-cluster-001
Started upgrading cluster: k8-cluster-dev
Upgrading cluster failed: k8-cluster-dev
Upgrade task ce31a1bb-380a-453f-afa0-835ffa1ce6ac is done.
</pre>


##<a id='manage-upgrade'></a> Manage Your Cluster Upgrade Job

You can use the PKS CLI to monitor and manage your <%= vars.product_tile %>-provisioned Kubernetes cluster 
upgrade jobs.  

###<a id='monitor-upgrades'></a> Monitor Your Clusters

To review the status of the actions being performed on your clusters, 
run the following command:

```
pks clusters
```

For example:
<pre class="terminal">
$ pks clusters
<br>
Upgrade is available to PKS Version: 1.7.0-build.16
<br>
PKS Version     Name               k8s Version  Plan Name  UUID                                  Status       Action
1.7.0-build.16  k8-cluster-000     1.16.7       small      9527ebaa-e2fa-422f-a52b-de3c3f0e39a4  succeeded    UPGRADE
1.7.0-build.16  k8-cluster-001     1.16.7       small      9527ebaa-e2fa-422f-a52b-de3c3f0e39a4  failed       UPGRADE
1.7.0-build.16  k8-cluster-002     1.16.7       small      9527ebaa-e2fa-422f-a52b-de3c3f0e39a4  in progress  UPGRADE
1.7.0-build.16  k8-cluster-003     1.16.7       small      9527ebaa-e2fa-422f-a52b-de3c3f0e39a4  queued       UPGRADE
</pre>

###<a id='monitor-upgrade-job'></a> Monitor Your Cluster Upgrade Job

To review the status of your `upgrade-clusters` job, run the following command:

```
pks task TASKID
```
Where `TASKID` is the ID of the task that was returned when you ran `pks upgrade-clusters`.

For example:
<pre class="terminal">
$ pks task ce31a1bb-380a-453f-afa0-835ffa1ce6ac
<br>
Your upgrade task is: done
<br>
Name           Status     Start time                     End time                            isCanary
k8-cluster-000 succeeded  Mon, 14 Oct 2019 12:00:00 PDT  Mon, 14 Oct 2019 12:19:54 PDT       true
k8-cluster-001 failed     Mon, 14 Oct 2019 12:20:00 PDT  ---                                 true
</pre>

###<a id='stop-upgrade-job'></a> Stop Your Cluster Upgrade Job

To cancel a running `upgrade-clusters` job, run the following PKS CLI command:

```
pks cancel-task TASKID
```
Where `TASKID` is the ID of the task that was returned when you ran `pks upgrade-clusters`.

<p class="note warning"><strong>Warning:</strong> <code>pks cancel-task</code> does not cancel cluster upgrades currently in progress. This command only cancels a job's pending cluster upgrades.
</p>


