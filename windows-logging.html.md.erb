---
title: Logging Windows Worker Clusters and Workers
owner: PKS
---

This topic describes how to install and configure 
components and integrations to capture 
<%= vars.product_full %> (<%= vars.k8s_runtime_abbr %>) 
Windows Worker Kubernetes cluster and worker node 
logs.

## <a id='logging-prerequisites'></a> Prerequisites

Before starting the tasks in this topic:  

* Your environment should be a Windows 2019 datacenter with vRLI.  
* You must have an accessible image registry.  


## <a id='logging-windows-clusters'></a> Logging Windows Worker Nodes

To send Windows worker logs to vRLI using Fluent Bit:  

1. [Prepare the Windows Worker Nodes](#prep-windows-nodes)
1. [Build a Fluent Bit Windows Docker Image](#build-docker-image)
1. [Build a Fluent Bit Syslog Plug-in Windows Docker Image](#build-syslog docker-image)
1. [Deploy Fluent Bit on the Windows Cluster](#build-syslog docker-image)

## <a id='prep-windows-nodes'></a> Prepare the Windows Worker Nodes

To prepare your Windows worker nodes for logging:

1. Install `docker` on each of the Windows worker nodes you wish to monitor logging on.

## <a id='build-docker-image'></a> Build a Fluent Bit Windows Docker Image

To build a Fluent Bit Windows Docker image:  

1. Start a remote Windows session to the Windows 2019 Windows worker.  
1. Download the Fluent Bit source code from the [fluent/fluent-bit](https://github.com/fluent/fluent-bit) 
repository on GitHub, to the worker.
1. To build the container image use `Dockerfile.windows`:    

    ```
    docker.exe build  -f Dockerfile.windows -t fluent-bit .
    ```

    When Docker builds the Fluent Bit container, it downloads `vc_redist.x64.exe` 
    and installs it in the Fluent Bit container.  If this process fails, 
    see [Troubleshooting](#troubleshooting) below.  
<br>
1. Push the image to your registry.

## <a id='build-syslog docker-image'></a> Build a Fluent Bit Syslog Plug-in Windows Docker Image

Fluent Bit does not officially support syslog output. 
To send <%= vars.k8s_runtime_abbr %> Windows worker container logs to vRLI, 
you must use a syslog plug-in.

To build a Fluent Bit syslog plug-in image:  

1. Download the syslog plug-in from the [benmoss/fluent-bit-out-syslog]
(https://github.com/benmoss/fluent-bit-out-syslog/tree/windows) GitHub repository.  
1. Open the `main.go` file you downloaded to `.../windows/cmd/main.go` in a text editor.  
1. To remove a conflict between this syslog plug-in and the default Fluent Bit syslog output, 
change this plug-in's out_syslog plug-in setting to `syslogvrli`:  

    ```
    //export FLBPluginRegister
    func FLBPluginRegister(def unsafe.Pointer) int {
        return output.FLBPluginRegister(
            def,
            "syslogvrli",
            "syslog output plugin that follows RFC 5424",
        )
    }
    ```
1. To build the container, use `Dockerfile.windows`: 

    ```
    FROM REGISTRY-IMAGE
    ```

    Where `REGISTRY-IMAGE` is the container you built in 
    [Build a Fluent Bit Windows Docker Image](#build-docker-image') above. 
    For example, `gcr.io/cf-london-servces-k8s/windows-images/fluent-bit:latest`.  

1. Push the image to your registry.


## <a id='build-syslog docker-image'></a> Deploy Fluent Bit on the Windows Cluster  

In addition to deploying the syslog plug-in,  we must also deploy the Kubernetes filter plug-in. 
The Kubernetes filter plug-in is a natively supported Fluent Bit filter which improves logging by
adding Kubernetes metadata, such as namespace, and pod name to your logs. 

To deploy Fluent Bit and send container logs to vRLI:  

1. To create a Fluent Bit deployment configuration file, complete the steps in [Configure Fluent Bit](#configure-fluent) below. 
1. To deploy Fluent Bit and related objects:

    ```
    kubectl create -f CONFIG-FILE
    ```

    Where `CONFIG-FILE` is the filename of your Fluent Bit deployment configuration file. For example, `fluent-bit.yml`.

<br>
To validate your Fluent Bit configuration and confirm that Fluent Bit is functioning:  

1. To create a configuration file for a test app, complete the steps in 
[Configure a Sample App](#configure-sample) below.  
1. To deploy the test app:  

    ```
    kubectl create -f CONFIG-FILE
    ```

    Where `CONFIG-FILE` is the filename of your sample app deployment configuration file. For example, `sample.yml`.   

1. Check logs in vRLI:
    1. Open vRLI.  
    1. Open the **vRLI** > **Interactive Analytics** tab.  
    1. Search the list for "logspewer". The "logspewer" items are the log entries generated by the sample app.  

## <a id='configure-fluent'></a>  Configure Fluent Bit 

Your Fluent Bit configuration is a YAML file that defines the Fluent Bit Service Account, Cluster Role, 
Cluster Role Binding and other objects. 
The Service Account, Cluster Role, Cluster Role Binding objects ensure that the Fluent Bit Kubernetes filter 
can access and read metadata from the Kubernetes API server `kubernetes.default.svc.cluster.local:443`.  

To configure Fluent Bit:  

1. Create a file named `fluent-bit.yml`.  
1. Populate the file with the following:  

    ```
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: fluent-bit-win
      namespace: pks-system
    --- 
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: fluent-bit-read
    rules:
    - apiGroups: [""]
      resources:
      - namespaces
      - pods
      verbs: ["get", "list", "watch"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: fluent-bit-read
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: fluent-bit-read
    subjects:
    - kind: ServiceAccount
      name: fluent-bit-win
      namespace: pks-system
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: fluent-bit-win
      labels:
        app: fluent-bit
      namespace: pks-system
    data:
      fluent-bit.conf: |
        [SERVICE]
            Flush         5
            Log_Level     debug
            Daemon        off
            Parsers_File  parsers.conf
     
        [INPUT]
            Name              tail
            Tag               kube.*
            Path              C:\var\log\containers\*.log
            Parser            docker
            DB                /var/log/flb_kube1.db
            Skip_Long_Lines   On
            Refresh_Interval  60
 
        [FILTER]
            Name                kubernetes
            Match               kube.*
            Kube_URL            https://kubernetes.default.svc.cluster.local:443
            Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
            Merge_Log           On
            DNS_Retries         10
            Kube_Tag_Prefix     kube.c.var.log.containers.
            K8S-Logging.Parser  On
 
        [OUTPUT]
            Name           PLUG-IN-ID                              #Use the plug-in id you changed before you use the image.
            Match          *
            InstanceName  plaintext-cluster-sink
            Addr          OUTPUT-ADDRESS:OUTPUT-PORT               #If you enable TLS, please use port 1514.
            Cluster       true
            #TLSConfig     {"insecure_skip_verify":true}           #If you enable TLS, place TLS-related configurations here.
      parsers.conf: |
        [PARSER]
            Name   json
            Format json
            Time_Key time
            Time_Format %d/%b/%Y:%H:%M:%S %z
 
        [PARSER]
            Name        docker
            Format      json
            Time_Key    time
            Time_Format %Y-%m-%dT%H:%M:%S.%L
            Time_Keep   On
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        app: fluent-bit
      name: fluent-bit-windows
      namespace: pks-system
    spec:
      selector:
        matchLabels:
          app: fluent-bit
      template:
        metadata:
          labels:
            app: fluent-bit
        spec:
          nodeSelector:
            beta.kubernetes.io/os: windows
          tolerations:
          - key: "windows"
            operator: "Equal"
            value: "2019"
            effect: "NoSchedule"
          containers:
          - image: REGISTRY-IMAGE                                          #Change image to point to the image in your registry.
            imagePullPolicy: IfNotPresent
            name: fluent-bit
            command: [fluent-bit]
            args:
            - --plugin
            - /syslog-plugin/out_syslog.so
            - --config
            - /fluent-bit/etc/fluent-bit.conf
            workingDir: /fluent-bit/etc
            volumeMounts:
            - mountPath: /fluent-bit/etc
              name: fluent-bit-config
            - mountPath: /var/log
              name: varlog
              readOnly: false
            - mountPath: /ProgramData/docker/containers
              name: dockercontainers
              readOnly: true
          volumes:
          - name: varlog
            hostPath:
              path: /var/log
          - name: dockercontainers
            hostPath:
              path: /ProgramData/docker/containers
          - configMap:
              defaultMode: 420
              name: fluent-bit-win                                        
            name: fluent-bit-config
          serviceAccountName: fluent-bit-win
      updateStrategy:
        type: RollingUpdate
    ```
    
    Where:
    * `PLUG-IN-ID` is the plug in ID for your plug in. For example, `syslogvrli`.
    * `OUTPUT-ADDRESS` is the IP address of your vRealize Log Insight installation.  
    * `OUTPUT-PORT` is the port to use to communicate with  your vRealize Log Insight installation. 
    Use port `514` for most installations. Use port `1514` if you enable TLS.  
    * `REGISTRY-IMAGE` is the location of Fluent Bit in your registry. For example, `fluent-bit-1.5.4-syslog:latest`.


## <a id='configure-sample'></a>  Configure a Sample App 

To confirm that logging is working correctly, use a sample app that outputs log entries frequently. 
When running, the sample app defined below outputs a log every 10 seconds.  

To configure a sample app for testing:  

1. Create a file named `sample.yml`.  
1. Populate the file with the following:  

    ```
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: logspewer
      namespace: pks-system
      labels:
        app: logspewer
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: logspewer
      template:
        metadata:
          labels:
            app: logspewer
        spec:
          containers:
          - name: logspewer
            image: pivotalgreenhouse/logspewer:latest
            env:
            - name: INTERVAL_IN_SECONDS
              value: "10"
          nodeSelector:
            kubernetes.io/os: windows
          tolerations:
          - key: "windows"
            operator: "Equal"
            value: "2019"
            effect: "NoSchedule"
    ```

1. Save the file. 

## <a id='troubleshooting'></a> Troubleshooting

### <a id='cannot-find-path'></a> Cannot Find Path Error When Creating the Fluent Bit Docker Container

#### Symptom
The error message `Copy-Item : Cannot find path 'C:\Windows\System32\msvcp140.dll'` is displayed while Docker 
installs `vc_redist.x64.exe`. 

#### Description
When Docker builds the Fluent Bit container, it downloads `vc_redist.x64.exe`, 
installs it in the new Docker container, and copies three DLL files to the `/fluent-bit/bin/` folder.  

If a `Copy-Item : Cannot find path` error is returned for either `msvcp140.dll`, `vccorlib140.dll`, or 
`vcruntime140.dll` the installation of `vc_redist.x64.exe` has failed.

#### Workaround
1. Install `vc_redist.x64.exe` on your local Windows 2019 machine:  

    ```
    RUN Write-Host ('Installing Visual C++ Redistributable Package'); `
        Start-Process /local/vc_redist.x64.exe -ArgumentList '/install', '/quiet', '/norestart' -NoNewWindow -Wait; 
    ```
1. Change directory to `C:\Windows\System32\`.
1. Copy the `msvcp140.dll`, `vccorlib140.dll`, and `vcruntime140.dll` files 
into the `/fluent-bit/bin/` directory:  

    ```
    COPY msvcp140.dll  /fluent-bit/bin/; 
    COPY vccorlib140.dll /fluent-bit/bin/; 
    COPY vcruntime140.dll /fluent-bit/bin/;
    ```
